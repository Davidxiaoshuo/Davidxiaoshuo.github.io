<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Swift 静态 vs 动态 分派</title>
      <link href="/iOS/swift_dynamic/"/>
      <url>/iOS/swift_dynamic/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h3><p>在讨论关于 Swift 的静态分派和动态分派之前，需要先弄清基本概念。</p><ol><li><p><code>值类型</code> 和 <code>引用类型</code>: 值类型，存储在栈中；引用类型存储在堆中。在 Swift 中，<code>struct</code>、<code>enum</code> 属于值类型，存储在栈上，<code>class</code> 属于引用类型，存储在堆上。</p></li><li><p>值类型，引用类型都支持静态调度，但是动态调度只有引用类型是可以支持的。</p></li><li><p>调度技术实际上是有 4 种的：</p><ul><li>Inline 「Fastest」</li><li>Static Dispatch</li><li>Virtual Dispatch</li><li>Dynamic Dispatch 「Slowest」</li></ul></li></ol><h3 id="静态-vs-动态"><a class="markdownIt-Anchor" href="#静态-vs-动态"></a> 静态 VS 动态</h3><blockquote><p>何为 <code>静态</code> 和 <code>动态</code> 分派：在执行方法时，首先要做的事就是找到方法，而能够在编译期就确定方法的方式就叫做<code>静态分派</code>，而无法在编译期确定，只能在运行时确定执行方法的方式就是动态分派。</p></blockquote><h4 id="static-dispatch"><a class="markdownIt-Anchor" href="#static-dispatch"></a> Static Dispatch</h4><ul><li>有时称为直接调度。</li><li>如果方法是静态分派的，编译器可以在编译时定位指令所在的位置。因此，当调用该函数时，系统会直接跳转到该函数的内存地址执行操作。这种直接行为导致执行速度非常快，并且还允许编译器执行各种优化，例如内联。事实上，由于巨大的性能提升，在编译管道中有一个阶段，在该阶段编译器尝试使函数静态（如果适用）。这种优化称为去虚拟化。</li></ul><h4 id="dynamic-dispatch"><a class="markdownIt-Anchor" href="#dynamic-dispatch"></a> Dynamic Dispatch</h4><ul><li>使用动态调度只有在运行时才知道要执行的是哪个方法。</li><li>Swift 提供了两种实现动态的方式：表调度「Table」和消息调度「Message」。</li></ul><h5 id="table-dispatch"><a class="markdownIt-Anchor" href="#table-dispatch"></a> Table Dispatch</h5><ul><li>基于继承关系的多态实现「Inheritance-Based Polymorphism」，一个类与一个所谓的虚拟表相关联，该虚拟表「V-Table」包含一个函数指针数组，该数组指向对应于该类的实际实现。请注意，V-Table 是在编译时构建的。因此，与静态调度相比，只有两条额外的指令（读取和跳转）。所以理论上分派应该很快。</li></ul><p><em><strong>[V-Table 内存结构]</strong></em><br><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/swift-v-table.png" alt="V-Table 内存结构"></p><ul><li>没有继承或引用语义的多态 「Protocol-Types」, 管理这个协议类型的方法表是 <code>Protocol Witness Table</code> 简称 <code>PWT</code>.</li></ul><p><em><strong>[PWT 内存结构]</strong></em><br><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/swift-pwt.png" alt></p><h5 id="message-dispatch"><a class="markdownIt-Anchor" href="#message-dispatch"></a> Message Dispatch</h5><ul><li><p>事实上，是 Objective-C 提供了这种机制（有时，它被称为消息传递），而 Swift 代码只是使用了 Objective-C 运行时库。每次调用 Objective-C 方法时，调用都会传递给 objc_msgSend，后者处理查找。从技术上讲，该过程从给定的类开始，并迭代类层次结构以提取实现。<br>消息调度是三者中最动态的。作为权衡，虽然查找性能由缓存机制保护，但解析实现的成本可能会有点昂贵。<br>这种机制是 Cocoa 框架的基石。查看 Swift 的源码，你会发现 KVO 是使用 swizzling 实现的。</p></li><li><p>Swift 中实现 Message Dispatch, 需要在方法前添加 <code>@objc dynamic</code>。 在 Swift 4.0 之前，<code>@objc</code> 是被隐式添加的，在 4.0 以后，需要我们手动添加。</p></li></ul><h3 id="swift-中的方法分派-case"><a class="markdownIt-Anchor" href="#swift-中的方法分派-case"></a> Swift 中的方法分派 case</h3><blockquote><p>Note: 带有 <code>final</code> 关键字的方法属于静态分派；普通扩展中的「不被 @objc, dynamic 描述的」方法也属于静态分派。</p></blockquote><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123; &#125;</span><br><span class="line"><span class="meta">@objc</span> <span class="keyword">dynamic</span> <span class="function"><span class="keyword">func</span> <span class="title">getWild</span><span class="params">()</span></span> &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123; &#125;<span class="comment">// Compiled error!</span></span><br><span class="line"><span class="meta">@objc</span> <span class="keyword">dynamic</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">getWild</span><span class="params">()</span></span> &#123; &#125; <span class="comment">// Ok :)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Noisy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeNoise</span><span class="params">()</span></span> -&gt; <span class="type">Int</span><span class="comment">// Table Dispatch</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Noisy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeNoise</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="number">0</span> &#125; <span class="comment">// Table Dispatch</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isAnnoying</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123; <span class="keyword">return</span> <span class="literal">true</span> &#125; <span class="comment">// Static Dispatch, extension 中普工方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>: <span class="title">Noisy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeNoise</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123; <span class="keyword">return</span> <span class="number">1</span> &#125; <span class="comment">// Table Dispatch</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isAnnoying</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123; <span class="keyword">return</span> <span class="literal">false</span> &#125; <span class="comment">// Table Dispatch</span></span><br><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">sleep</span><span class="params">()</span></span> &#123; &#125;<span class="comment">// Table Dispatch</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eat</span><span class="params">()</span></span> &#123; &#125; <span class="comment">// Static Dispatch, extension 中普工方法</span></span><br><span class="line"><span class="meta">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">getWild</span><span class="params">()</span></span> &#123; &#125; <span class="comment">// Message Dispatch</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h3><ul><li><a href="https://trinhngocthuyen.github.io/posts/tech/method-dispatch-in-swift/" target="_blank" rel="noopener">Method dispatch in Swift</a></li><li><a href="https://forums.swift.org/t/making-the-value-witness-table-reference-relative/1206" target="_blank" rel="noopener">making-the-value-witness-table-reference-relative</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 总结之属性重写 「override」</title>
      <link href="/iOS/swift_override_property/"/>
      <url>/iOS/swift_override_property/</url>
      
        <content type="html"><![CDATA[<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储属性</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> chineseScore: <span class="type">Double</span> = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">var</span> englishScore: <span class="type">Double</span> = <span class="number">0.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 计算属性</span></span><br><span class="line">    <span class="keyword">var</span> averageScore: <span class="type">Double</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 访问（获取）调用get</span></span><br><span class="line">        <span class="keyword">get</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (chineseScore + englishScore) / <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置值的时候</span></span><br><span class="line">        <span class="keyword">set</span>&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"set\(newValue)"</span>)</span><br><span class="line">            <span class="comment">// 千万不要在这里设置值 会死循环  外部参数起名字 newvalue</span></span><br><span class="line">            <span class="comment">// self.averageScore = newValue</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只读计算属性</span></span><br><span class="line">    <span class="keyword">var</span> averageScore2: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (chineseScore + englishScore) / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类属性, 不能被重写</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> couseCount  = <span class="number">3</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 懒加载属性</span></span><br><span class="line">    <span class="built_in">lazy</span> <span class="keyword">var</span> courses: [<span class="type">String</span>] = &#123; ()-&gt;[<span class="type">String</span>] <span class="keyword">in</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"懒加载属性"</span>)</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">"java"</span>, <span class="string">"html"</span>, <span class="string">"swift"</span>]</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 属性观察器-有的属性很重要，我希望关注每一次赋值的变化。</span></span><br><span class="line">    <span class="comment">// 验证 willSet 和 didSet 作用</span></span><br><span class="line">    <span class="comment">// 内置变量：newValue oldValue</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"tt"</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// newValue</span></span><br><span class="line">        <span class="keyword">willSet</span>&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"父类 willSet 被调用, newValue\(newValue)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// oldValue</span></span><br><span class="line">        <span class="keyword">didSet</span>&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"父类 didSet 被调用, oldValue\(oldValue)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性的继承与重写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SeniorStudent</span> : <span class="title">Student</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> _chineseScore: <span class="type">Double</span> = <span class="number">0.0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 子类都可以通过提供getter和setter对属性进行重写</span></span><br><span class="line">    <span class="comment">// 重写后，存储属性变为计算属性</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> chineseScore: <span class="type">Double</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> _chineseScore</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">set</span> &#123; _chineseScore = newValue &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不可以将继承来的读写属性重写为只读属性</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> averageScore: <span class="type">Double</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">90.5</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">set</span>&#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果父类已经添加了属性观察器，当属性发生变化时，父类与子类都会得到通知</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> name:<span class="type">String</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// newValue</span></span><br><span class="line">        <span class="keyword">willSet</span>&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"子类 willSet 被调用, newValue\(newValue)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// oldValue</span></span><br><span class="line">        <span class="keyword">didSet</span>&#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"子类 didSet 被调用,oldValue\(oldValue)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/// 懒加载属性，重写后变为计算属性</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> courses: [<span class="type">String</span>] &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="string">"swift"</span>, <span class="string">"OC"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">set</span> &#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> averageScore2: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">96.1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> student = <span class="type">SeniorStudent</span>()</span><br><span class="line">student.chineseScore = <span class="number">91</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(student.chineseScore)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 总结之关键字</title>
      <link href="/iOS/swift_keyword_summary/"/>
      <url>/iOS/swift_keyword_summary/</url>
      
        <content type="html"><![CDATA[<h3 id="声明式关键字"><a class="markdownIt-Anchor" href="#声明式关键字"></a> 声明式关键字</h3><h5 id="keyword-class"><a class="markdownIt-Anchor" href="#keyword-class"></a> Keyword： <code>class</code></h5><p>Description： Swift 语言中一种构造体「数据类型」，它具有以下特性：</p><ul><li>一个类允许另一个类进行继承，形成父子关系。</li><li>支持类型转换「type-casting」，允许在运行时，检查 &amp; 指定一个类的实际类型。</li><li>支持实现协议「protocol」。</li><li>支持 <code>deinit</code> 析构函数，并且在销毁前可以释放所有资源。</li><li>支持引用计数，允许多个引用指向同一个实例。</li><li>不支持默认成员初始化构造器「memberwise initializer」。</li><li>属于引用类型，存储在堆内存中</li></ul><h5 id="keyword-struct"><a class="markdownIt-Anchor" href="#keyword-struct"></a> Keyword： <code>struct</code></h5><p>Description：与 class 一样，也是 Swift 语言中一个重要的构造体「数据类型」，它具有以下特性：</p><ul><li>支持实现协议</li><li>支持默认成员初始化构造器「memberwise initializer」。</li><li>不支持类型转换「type-casting」</li><li>不支持 <code>deinit</code>析构函数</li><li>内部方法修改属性时，需要在方法上添加 <code>mutating</code> 关键字</li><li>属于值类型，存储在栈内存中</li></ul><h5 id="keywordenum"><a class="markdownIt-Anchor" href="#keywordenum"></a> Keyword：<code>enum</code></h5><p>Description：Swift 中的一种数据类型，它是一组有共同特性的数据的集合。它具有以下特性：</p><ul><li>支持实现协议</li><li>支持初始化方法「构造方法」</li><li>内部方法修改属性时，需要在方法上添加 <code>mutating</code> 关键字</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Barcode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> upc(<span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> qrCode(<span class="type">String</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keywordprotocol"><a class="markdownIt-Anchor" href="#keywordprotocol"></a> Keyword：<code>protocol</code></h5><p>Description：协议定义了适合特定任务或功能的方法、属性。然后，类、结构或枚举可以采用该协议，以提供这些要求的实际实现。任何满足协议要求的类型都被称为符合该协议。除了指定符合类型必须实现的要求之外，您还可以扩展协议以实现其中一些要求或实现符合类型可以利用的附加功能。<a href="https://docs.swift.org/swift-book/LanguageGuide/Protocols.html" target="_blank" rel="noopener">详见</a></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">SomeProtocol</span> </span>&#123;</span><br><span class="line">    <span class="comment">// protocol definition goes here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keyword-extension"><a class="markdownIt-Anchor" href="#keyword-extension"></a> Keyword： <code>extension</code></h5><p>Description：向现有类、结构、枚举或协议类型添加新功能。这包括扩展您无法访问原始源代码的类型的能力（称为追溯建模）。扩展类似于 Objective-C 中的类别。 （与 Objective-C 类别不同，Swift 扩展没有名称。）<a href="https://docs.swift.org/swift-book/LanguageGuide/Extensions.html" target="_blank" rel="noopener">详见</a></p><p>在 swift 中 extension 有以下具体能力：</p><ul><li>添加计算实例属性或计算类型属性</li><li>定义实例方法和类型方法</li><li>提供新的构造函数</li><li>定义下标</li><li>定义和使用新的嵌套类型</li><li>实现现有需要实现的协议</li></ul><h5 id="keywordinit"><a class="markdownIt-Anchor" href="#keywordinit"></a> Keyword：<code>init</code></h5><p>Description: class, struct, enum 的构造方法。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Gender</span>: <span class="title">RawRepresentable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">typealias</span> <span class="type">RawValue</span> = <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> male</span><br><span class="line">    <span class="keyword">case</span> female</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rawValue: <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .male: <span class="keyword">return</span> <span class="string">"male"</span></span><br><span class="line">        <span class="keyword">case</span> .female: <span class="keyword">return</span> <span class="string">"female"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>?(rawValue: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> rawValue &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"male"</span>: <span class="keyword">self</span> = .male</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"female"</span>: <span class="keyword">self</span> = .female</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClassInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> grade: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> classNum: <span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> gender: <span class="type">Gender</span></span><br><span class="line">    <span class="keyword">var</span> classInfo: <span class="type">ClassInfo</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, gender: <span class="type">Gender</span>, classInfo: <span class="type">ClassInfo</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.gender = gender</span><br><span class="line">        <span class="keyword">self</span>.classInfo = classInfo</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keyword-deinit"><a class="markdownIt-Anchor" href="#keyword-deinit"></a> Keyword： <code>deinit</code></h5><p>Description：class 的析构函数，每个类只允许有一个析构函数。析构函数在类实例释放前自动调用，不允许手动调用。超类的析构器由子类继承，在子类析构函数调用结束时，自动调用父类析构函数。 父类的析构器总会被调用，即使子类没有实现析构函数。实际开发中，我们可以通过 deinit 来观察类实例是否被释放。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">deinit</span> &#123;</span><br><span class="line">  <span class="comment">// perform the deinitialization</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keywordconvenience"><a class="markdownIt-Anchor" href="#keywordconvenience"></a> Keyword：<code>convenience</code></h5><p>Description: convenience init 是类中次要的，辅助型的构造器，可以调用便利构造来调用同一个类中的指定的构造器，并且为其提供默认值，</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">init</span>(age:<span class="type">Int</span>, name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.age = age;</span><br><span class="line">        <span class="keyword">self</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(age: <span class="type">Int</span>, firstName: <span class="type">String</span>, lastName: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age:age, name:firstName+lastName);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(age: <span class="type">Int</span>, firstName: <span class="type">String</span>, lastName: <span class="type">String</span>, height: <span class="type">CGFloat</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age: age, firstName: firstName, lastName: lastName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>: <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> address: <span class="type">String</span></span><br><span class="line">    <span class="keyword">init</span>(age: <span class="type">Int</span>, name: <span class="type">String</span>, address: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.address = address;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(age: age, name: name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(age: <span class="type">Int</span>, firstName: <span class="type">String</span>, lastName: <span class="type">String</span>, address: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(age: age,name: firstName + lastName, address: address);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keywordrequired"><a class="markdownIt-Anchor" href="#keywordrequired"></a> Keyword：<code>required</code></h5><p>Description: 在类的构造器前添加 required 修饰符表明所有该类的子类都必须实现该构造器</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str: <span class="type">String</span></span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(str: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.str = str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeSubclass</span>: <span class="title">SomeClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(str: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(str: str)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">init</span>(i: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(str: <span class="type">String</span>(i))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="type">SomeSubclass</span>(str:<span class="string">"Hello Swift"</span>)</span><br></pre></td></tr></table></figure><h5 id="keywordimport"><a class="markdownIt-Anchor" href="#keywordimport"></a> Keyword：<code>import</code></h5><p>Description: 包导入。 <a href="https://swift.gg/2019/09/23/swift-import/" target="_blank" rel="noopener">详见</a></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &lt;#module#&gt;</span><br><span class="line"><span class="keyword">import</span> &lt;#kind#&gt; &lt;#module.symbol#&gt;</span><br><span class="line"><span class="keyword">import</span> &lt;#module.submodule#&gt;</span><br></pre></td></tr></table></figure><h5 id="keyword-typealias"><a class="markdownIt-Anchor" href="#keyword-typealias"></a> Keyword： <code>typealias</code></h5><p>Description：<code>typealias</code> 是特定类型的别名。换句话说，类型别名是在你的代码库里插入现有类型的另一个名称。<a href="https://swift.gg/2020/04/11/2019-05-15-the-usefulness-of-typealiases/" target="_blank" rel="noopener">详见</a></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Money</span> = <span class="type">Int</span></span><br></pre></td></tr></table></figure><h5 id="keyword-associatedtype"><a class="markdownIt-Anchor" href="#keyword-associatedtype"></a> Keyword: <code>associatedtype</code></h5><p>Description: 关联类型定义。在协议中，定义一个类型的占位符名称。直到协议被实现，该占位符才会被指定具体的类型。<a href="https://docs.swift.org/swift-book/LanguageGuide/Generics.html#ID189" target="_blank" rel="noopener">详见</a></p><h5 id="keywordlet"><a class="markdownIt-Anchor" href="#keywordlet"></a> Keyword：<code>let</code></h5><p>Description：定义一个常量。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> constantString = <span class="string">"hello world!"</span></span><br></pre></td></tr></table></figure><h5 id="keywordvar"><a class="markdownIt-Anchor" href="#keywordvar"></a> Keyword：<code>var</code></h5><p>Description: 定义一个变量。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> variableString = <span class="string">"hello my world!"</span></span><br><span class="line">variableString = <span class="string">"hello your world!"</span></span><br></pre></td></tr></table></figure><h5 id="keyword-func"><a class="markdownIt-Anchor" href="#keyword-func"></a> Keyword： <code>func</code></h5><p>Description：方法定义。<a href="https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID159" target="_blank" rel="noopener">详见</a></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(person: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> greeting = <span class="string">"Hello, "</span> + person + <span class="string">"!"</span></span><br><span class="line">    <span class="keyword">return</span> greeting</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keywordinout"><a class="markdownIt-Anchor" href="#keywordinout"></a> Keyword：<code>inout</code></h5><p>Description: <code>inout</code>是按值传递，然后再写回原变量，而不是按引用传递。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inc</span><span class="params">(<span class="keyword">inout</span> i: Int)</span></span> &#123;</span><br><span class="line">    ++i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line">inc(&amp;x)</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">// 输出结果：“1”</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inc</span><span class="params">(<span class="keyword">inout</span> i: Int)</span></span> -&gt; () -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; ++i &#125;  <span class="comment">// 闭包中截获inout参数i</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> f = inc(&amp;x)</span><br><span class="line"><span class="built_in">print</span>(f()) <span class="comment">// 输出结果：“1”</span></span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment">// 输出结果：“0”。</span></span><br></pre></td></tr></table></figure><h5 id="keywordoverride"><a class="markdownIt-Anchor" href="#keywordoverride"></a> Keyword：<code>override</code></h5><p>Description: 属性、方法重写需要用 <code>override</code>修饰。 属性重写<a href="../swift_override_property/">参考</a></p><p>Keyword: <code>final</code></p><p>Description：可以在class、func和var前修饰。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="function"><span class="keyword">func</span> <span class="title">method1</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//权限验证（必须执行）</span></span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">         </span><br><span class="line">        method2()</span><br><span class="line">         </span><br><span class="line">        <span class="comment">//下面是日志记录（必须执行）</span></span><br><span class="line">        <span class="comment">//..........</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//父类的实现</span></span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="comment">//只能重写父类的method2方法，不能重写method1方法</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">method2</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//子类的实现</span></span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keyword-mutating"><a class="markdownIt-Anchor" href="#keyword-mutating"></a> Keyword: <code>mutating</code></h5><p>Description: <a href="#Keyword%EF%BC%9A">见</a></p><h5 id="keywordnonmutating"><a class="markdownIt-Anchor" href="#keywordnonmutating"></a> Keyword：<code>nonmutating</code></h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Settings</span> </span>&#123;</span><br><span class="line">    <span class="keyword">subscript</span>(key: <span class="type">String</span>) -&gt; <span class="type">AnyObject?</span> &#123; <span class="keyword">get</span> <span class="keyword">nonmutating</span> <span class="keyword">set</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> b: <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">nonmutating</span> <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"\(newValue)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 由于这里 t 是常量，如果 setter 中不是使用 nonmutating，编译器会报错</span></span><br><span class="line"><span class="comment">/// Cannot assign to property: 't' is a 'let' constant</span></span><br><span class="line"><span class="keyword">let</span> t = <span class="type">Test2</span>()</span><br><span class="line">t.b = <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(t.b)</span><br></pre></td></tr></table></figure><h5 id="keyword-dynamic"><a class="markdownIt-Anchor" href="#keyword-dynamic"></a> Keyword： <code>dynamic</code></h5><p>Description: 指明编译器不会对类成员或者函数的方法进行内联或虚拟化。这意味着对这个成员的访问是使用 Objective-C 运行时进行动态派发的（代替静态调用）。 <a href="https://juejin.cn/post/6844903665745002503" target="_blank" rel="noopener">参考1</a>，<a href="https://tech.meituan.com/2018/11/01/swift-compile-performance-optimization.html" target="_blank" rel="noopener">参考2</a></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="comment">//隐式指明含有 "objc" 属性</span></span><br><span class="line">    <span class="comment">//这对依赖于 Objc-C 黑魔法的库或者框架非常有用</span></span><br><span class="line">    <span class="comment">//比如 KVO、KVC、Swizzling</span></span><br><span class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> name:<span class="type">String?</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性声明相关的关键字"><a class="markdownIt-Anchor" href="#属性声明相关的关键字"></a> 属性声明相关的关键字</h3><h5 id="keyword-lazyset-get-willset-didset"><a class="markdownIt-Anchor" href="#keyword-lazyset-get-willset-didset"></a> Keyword： <code>lazy</code>，<code>set</code>， <code>get</code>, <code>willSet</code>, <code>didSet</code></h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 懒加载属性</span></span><br><span class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> courses: [<span class="type">String</span>] = &#123; ()-&gt;[<span class="type">String</span>] <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"懒加载属性"</span>)</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">"java"</span>, <span class="string">"html"</span>, <span class="string">"swift"</span>]</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算属性</span></span><br><span class="line"><span class="keyword">var</span> averageScore: <span class="type">Double</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 访问（获取）调用get</span></span><br><span class="line">  <span class="keyword">get</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (chineseScore + englishScore) / <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置值的时候</span></span><br><span class="line">  <span class="keyword">set</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"set\(newValue)"</span>)</span><br><span class="line">    <span class="comment">// 千万不要在这里设置值 会死循环  外部参数起名字 newvalue</span></span><br><span class="line">    <span class="comment">// self.averageScore = newValue</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 属性观察器-有的属性很重要，我希望关注每一次赋值的变化。</span></span><br><span class="line"><span class="comment">// 验证 willSet 和 didSet 作用</span></span><br><span class="line"><span class="comment">// 内置变量：newValue oldValue</span></span><br><span class="line"><span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">"tt"</span> &#123;</span><br><span class="line">        </span><br><span class="line">  <span class="comment">// newValue</span></span><br><span class="line">  <span class="keyword">willSet</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"父类 willSet 被调用, newValue\(newValue)"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// oldValue</span></span><br><span class="line">  <span class="keyword">didSet</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"父类 didSet 被调用, oldValue\(oldValue)"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="权限控制关键字"><a class="markdownIt-Anchor" href="#权限控制关键字"></a> 权限控制关键字</h3><h5 id="keywordopen"><a class="markdownIt-Anchor" href="#keywordopen"></a> Keyword：<code>open</code></h5><p>Description：公开权限，最高权限级别。可以被其他 Module 访问、继承、复写。只能用于类和类的成员</p><p><em><strong>Note：由于其具有复写的特性，而 <code>let「常量」</code>属性隐式为 <code>final</code>, 不可复写，所以 open 不能应用到 let 属性上。</strong></em></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">func</span> <span class="title">talking</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keyword-public"><a class="markdownIt-Anchor" href="#keyword-public"></a> Keyword: <code>public</code></h5><p>Description：公有访问权限, 类或者类的公有属性或者公有方法可以从文件或者模块的任何地方进行访问. 一个<code>App</code>就是一个模块, 一个第三方<code>API</code>、第三方框架等都是一个完整的模块, 这些模块如果要对外留有访问的属性或者方法, 就应该使用<code>public</code>的访问权限. <code>public</code>的权限在<code>Swift 3.0</code>后无法在其它模块被复写方法/属性或被继承.</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">let</span> uid: <span class="type">String</span> = <span class="type">UUID</span>().uuidString</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">talking</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keyword-internal"><a class="markdownIt-Anchor" href="#keyword-internal"></a> Keyword: <code>internal</code></h5><p>Description: 在模块内部可以访问, 超出模块内部就不可被访问了. 在<code>Swift</code>中属隐式权限，如果不特别设置权限级别，默认即为 <code>internal</code></p><h5 id="keywordfileprivate"><a class="markdownIt-Anchor" href="#keywordfileprivate"></a> Keyword：<code>fileprivate</code></h5><p>Description：文件私有访问权限, 被<code>fileprivate</code>修饰的类或者类的属性或方法可以在同一个物理文件中访问. 如果超出该物理文件, 那么有这<code>fileprivate</code>访问权限的类、属性和方法就不能被访问了.</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassModel</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">  <span class="keyword">init</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> student = <span class="type">Student</span>()</span><br><span class="line">    <span class="keyword">let</span> studentName = student.name <span class="comment">//只有此文件内可访问</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fileprivate</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">""</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">12</span> <span class="comment">// 外部不可访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keywordprivate"><a class="markdownIt-Anchor" href="#keywordprivate"></a> Keyword：<code>private</code></h5><p>Description：私有访问权限, 被<code>private</code>修饰的类或者类的属性或方法可以在同一个物理文件中的同一个类型(包含<code>extension</code>)访问. 如果超出物理文件或不属于同一类型, 那么有着<code>private</code>访问权限的属性和方法就不能被访问.</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> uid = <span class="type">UUID</span>().uuidString</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> name: <span class="type">String?</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">taking</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型范围作用域关键字"><a class="markdownIt-Anchor" href="#类型范围作用域关键字"></a> 类型范围作用域关键字</h3><h5 id="keyword-static"><a class="markdownIt-Anchor" href="#keyword-static"></a> Keyword: <code>static</code></h5><p>Description: 用来修饰类型「class / struct / enum」的属性或方法。<code>static</code>具有以下特性：</p><ul><li><code>static</code>可以修饰计算属性、存储属性、类型方法。</li><li>在 <code>protocol</code>中，如果需要，要使用 <code>static</code> 进行修饰。</li><li><code>static</code> 修饰的属性/方法具有隐式的 <code>final</code> 特性，因此不能够继承。</li><li>静态属性具有实例内存共享特性</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">let</span> x: <span class="type">Double</span>  </span><br><span class="line">    <span class="keyword">let</span> y: <span class="type">Double</span>  </span><br><span class="line">    <span class="comment">// 存储属性  </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> zero = <span class="type">Point</span>(x: <span class="number">0</span>, y: <span class="number">0</span>)  </span><br><span class="line">    <span class="comment">// 计算属性  </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> ones: [<span class="type">Point</span>] &#123;  </span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="type">Point</span>(x: <span class="number">1</span>, y: <span class="number">1</span>),  </span><br><span class="line">            <span class="type">Point</span>(x: -<span class="number">1</span>, y: <span class="number">1</span>),  </span><br><span class="line">            <span class="type">Point</span>(x: <span class="number">1</span>, y: -<span class="number">1</span>),  </span><br><span class="line">            <span class="type">Point</span>(x: -<span class="number">1</span>, y: -<span class="number">1</span>)</span><br><span class="line">        ]  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 类型方法  </span></span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(p1: Point, p2: Point)</span></span> -&gt; <span class="type">Point</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="type">Point</span>(x: p1.x + p2.x, y: p1.y + p2.y)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keywordclass"><a class="markdownIt-Anchor" href="#keywordclass"></a> Keyword：<code>class</code></h5><p>Description：只能用来修饰类方法，计算属性。</p><ul><li>在 <code>protocol</code> 中，不可以使用 <code>class</code> 来修饰。</li><li><code>class</code> 修饰的类方法，可以继承。</li></ul><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">    <span class="comment">//修饰计算属性</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">age</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 修饰类方法</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">testFunc</span>() </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算关键字"><a class="markdownIt-Anchor" href="#逻辑运算关键字"></a> 逻辑运算关键字</h3><h5 id="keyword-ifelse"><a class="markdownIt-Anchor" href="#keyword-ifelse"></a> Keyword： <code>if</code>，<code>else</code></h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> number &gt; <span class="number">1</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"greating many times"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> number &lt; <span class="number">1</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"not greating"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"greating one times"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keywordfor"><a class="markdownIt-Anchor" href="#keywordfor"></a> Keyword：<code>for</code></h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers: [<span class="type">Int</span>] = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>..&lt;numbers.<span class="built_in">count</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"number = \(numbers[index])"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keyword-switch-case-defaultfallthrough"><a class="markdownIt-Anchor" href="#keyword-switch-case-defaultfallthrough"></a> Keyword: <code>switch</code>， <code>case</code>， <code>default</code>，<code>fallthrough</code></h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">GenderValue</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> male</span><br><span class="line">  <span class="keyword">case</span> female</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> gender &#123;</span><br><span class="line">  <span class="keyword">case</span> .male:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"The gender value is \(.male.rawValue)"</span>)</span><br><span class="line">  <span class="keyword">case</span> .female:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"The gender value is \(.female.rawValue)"</span>)</span><br><span class="line">  <span class="keyword">default</span>: <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> index &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">100</span>  :</span><br><span class="line">      <span class="built_in">print</span>( <span class="string">"index 的值为 100"</span>)</span><br><span class="line">      <span class="keyword">fallthrough</span></span><br><span class="line">   <span class="keyword">case</span> <span class="number">10</span>,<span class="number">15</span>  :</span><br><span class="line">      <span class="built_in">print</span>( <span class="string">"index 的值为 10 或 15"</span>)</span><br><span class="line">      <span class="keyword">fallthrough</span></span><br><span class="line">   <span class="keyword">case</span> <span class="number">5</span>  :</span><br><span class="line">      <span class="built_in">print</span>( <span class="string">"index 的值为 5"</span>)</span><br><span class="line">   <span class="keyword">default</span> :</span><br><span class="line">      <span class="built_in">print</span>( <span class="string">"默认 case"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index 的值为 10 或 15</span></span><br><span class="line"><span class="comment">// index 的值为 5</span></span><br></pre></td></tr></table></figure><h5 id="keyword-repeatwhile"><a class="markdownIt-Anchor" href="#keyword-repeatwhile"></a> Keyword: <code>repeat</code>，<code>while</code></h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在使用循环的判断条件之前，先执行一次循环中的代码。</span></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125; <span class="keyword">while</span> n &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">0</span> &#123;</span><br><span class="line">    <span class="comment">// do something </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keywordwhere"><a class="markdownIt-Anchor" href="#keywordwhere"></a> Keyword：<code>where</code></h5><p>Description：可以用来设置约束条件、限制类型，让代码更加简洁、易读。 <a href="https://www.hangge.com/blog/cache/detail_1826.html" target="_blank" rel="noopener">参考</a></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// switch语句中使用</span></span><br><span class="line">scores.forEach &#123;</span><br><span class="line">    <span class="keyword">switch</span> $<span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> x&gt;=<span class="number">60</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"及格"</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"不及格"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/// for语句中使用</span></span><br><span class="line"><span class="keyword">for</span> score <span class="keyword">in</span> scores <span class="keyword">where</span> score&gt;=<span class="number">60</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"这个是及格的：\(score)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 在 do catch 里面使用</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ExceptionError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> httpCode(<span class="type">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">throwError</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="type">ExceptionError</span>.httpCode(<span class="number">500</span>)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">try</span> throwError()</span><br><span class="line">&#125;<span class="keyword">catch</span> <span class="type">ExceptionError</span>.httpCode(<span class="keyword">let</span> httpCode) <span class="keyword">where</span> httpCode &gt;= <span class="number">500</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"server error"</span>)</span><br><span class="line">&#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"other error"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 与协议结合</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">aProtocol</span></span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//只给遵守myProtocol协议的UIView添加了拓展</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">aProtocol</span> <span class="title">where</span> <span class="title">Self</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getString</span><span class="params">()</span></span> -&gt; <span class="type">String</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"string"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 可以在 associatedtype 后面声明的类型后追加 where 约束语句</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Sequence</span> </span>&#123;</span><br><span class="line">    <span class="keyword">associatedtype</span> <span class="type">Element</span> <span class="keyword">where</span> <span class="type">Self</span>.<span class="type">Element</span> == <span class="type">Self</span>.<span class="type">Iterator</span>.<span class="type">Element</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Sequence，Collection 同样新增了 where 语句约束</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Sequence</span> <span class="title">where</span> <span class="title">Element</span>: <span class="title">Numeric</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum: <span class="type">Element</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> result: <span class="type">Element</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> item  <span class="keyword">in</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            result += item</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Collection</span> <span class="title">where</span> <span class="title">Element</span>: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">prefieIsEqualSuffix</span><span class="params">(<span class="number">_</span> n: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> head = <span class="keyword">prefix</span>(n)</span><br><span class="line">        <span class="keyword">let</span> suff = suffix(n).reversed()</span><br><span class="line">        <span class="keyword">return</span> head.elementsEqual(suff)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keywordguard"><a class="markdownIt-Anchor" href="#keywordguard"></a> Keyword：<code>guard</code></h5><p>Description： <a href="https://swift.gg/2016/02/14/swift-guard-radix/" target="_blank" rel="noopener">详见</a></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">updateWatchApplicationContext</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> session = <span class="type">WCSession</span>.defaultSession()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">guard</span> session.watchAppInstalled <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> context = [<span class="string">"token"</span>: api.token]</span><br><span class="line">        <span class="keyword">try</span> session.updateApplicationContext(context)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keywordreturn"><a class="markdownIt-Anchor" href="#keywordreturn"></a> Keyword：<code>return</code></h5><p>Description：方法返回值</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">(person: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> greeting = <span class="string">"Hello, "</span> + person + <span class="string">"!"</span></span><br><span class="line">    <span class="keyword">return</span> greeting</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keywordbreak"><a class="markdownIt-Anchor" href="#keywordbreak"></a> Keyword：<code>break</code></h5><p>Description：立刻结束整个控制流的执行。如果是嵌套循环（即一个循环内嵌套另一个循环），break 语句会停止执行最内层的循环，然后开始执行该块之后的下一行代码。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span>&#123;</span><br><span class="line">    index = index + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>( index == <span class="number">15</span> )&#123;  <span class="comment">// index 等于 15 时终止循环</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>( <span class="string">"index 的值为 \(index)"</span>)</span><br><span class="line">&#125;<span class="keyword">while</span> index &lt; <span class="number">20</span></span><br></pre></td></tr></table></figure><h5 id="keyword-continue"><a class="markdownIt-Anchor" href="#keyword-continue"></a> Keyword: <code>continue</code></h5><p>Description：一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。对于 <strong>for</strong> 循环，<strong>continue</strong> 语句执行后自增语句仍然会执行。对于 <strong>while</strong> 和 <strong>do…while</strong> 循环，<strong>continue</strong> 语句重新执行条件判断语句。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> index = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">repeat</span>&#123;</span><br><span class="line">   index = index + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">if</span>( index == <span class="number">15</span> )&#123; <span class="comment">// index 等于 15 时跳过</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="built_in">print</span>( <span class="string">"index 的值为 \(index)"</span>)</span><br><span class="line">&#125;<span class="keyword">while</span> index &lt; <span class="number">20</span></span><br></pre></td></tr></table></figure><h5 id="keywordin"><a class="markdownIt-Anchor" href="#keywordin"></a> Keyword：<code>in</code></h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// 闭包中</span></span><br><span class="line">&#123;</span><br><span class="line">    (s:<span class="type">String</span>)-&gt;() <span class="keyword">in</span></span><br><span class="line">    <span class="comment">// body</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// for-in 循环</span></span><br><span class="line"><span class="keyword">import</span> Cocoa</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">1</span>...<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(index) 乘于 5 为：\(index * 5)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="keyword-defer"><a class="markdownIt-Anchor" href="#keyword-defer"></a> Keyword: <code>defer</code></h5><p>Description: <a href="https://onevcat.com/2018/11/defer/" target="_blank" rel="noopener">详见</a></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">operateOnFile</span><span class="params">(descriptor: Int32)</span></span> &#123;</span><br><span class="line">    <span class="keyword">let</span> fileHandle = <span class="type">FileHandle</span>(fileDescriptor: descriptor)</span><br><span class="line">    <span class="keyword">defer</span> &#123; fileHandle.closeFile() &#125;</span><br><span class="line">    <span class="keyword">let</span> data = fileHandle.readDataToEndOfFile()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="comment">/* onlyRead */</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> shouldWrite = <span class="comment">/* 是否需要写文件 */</span></span><br><span class="line">    <span class="keyword">guard</span> shouldWrite <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    fileHandle.seekToEndOfFile()</span><br><span class="line">    fileHandle.write(someData)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常处理关键字"><a class="markdownIt-Anchor" href="#异常处理关键字"></a> 异常处理关键字</h3><h5 id="keyworddotry-catchthrowthrowsrethrows"><a class="markdownIt-Anchor" href="#keyworddotry-catchthrowthrowsrethrows"></a> Keyword：<code>do</code>，<code>try</code>, <code>catch</code>，<code>throw</code>，<code>throws</code>，<code>rethrows</code></h5><p>Description: <a href="https://docs.swift.org/swift-book/LanguageGuide/ErrorHandling.html" target="_blank" rel="noopener">参考1</a>，<a href="https://swifter.tips/error-handle/" target="_blank" rel="noopener">参考2</a></p><h3 id="类型相关的关键字"><a class="markdownIt-Anchor" href="#类型相关的关键字"></a> 类型相关的关键字</h3><h5 id="keywordanyasisnil-superself-self-type"><a class="markdownIt-Anchor" href="#keywordanyasisnil-superself-self-type"></a> Keyword：<code>Any</code>,<code>as</code>，<code>is</code>，<code>nil</code>， <code>super</code>，<code>self</code>， <code>Self</code>, <code>Type</code></h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// Any：用于表示任意类型的实例，包括函数类型。</span></span><br><span class="line"><span class="keyword">var</span> anything = [<span class="type">Any</span>]()</span><br><span class="line">anything.append(<span class="string">"Any Swift type can be added"</span>)  </span><br><span class="line">anything.append(<span class="number">0</span>)  </span><br><span class="line">anything.append(&#123;(foo: <span class="type">String</span>) -&gt; <span class="type">String</span> <span class="keyword">in</span> <span class="string">"Passed in (foo)"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// as：类型转换运算符，用于尝试将值转成其它类型。</span></span><br><span class="line"><span class="keyword">let</span> intInstance = anything[<span class="number">1</span>] <span class="keyword">as</span>? <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// is：类型检查运算符，用于确定实例是否为某个子类类型。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> : <span class="title">Person</span> </span>&#123;&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Nurse</span> : <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> people = [<span class="type">Programmer</span>(), <span class="type">Nurse</span>()]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> aPerson <span class="keyword">in</span> people  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span> aPerson <span class="keyword">is</span> <span class="type">Programmer</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"This person is a dev"</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> aPerson <span class="keyword">is</span> <span class="type">Nurse</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"This person is a nurse"</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// nil：在 Swift 中表示任意类型的无状态值。与 Objective-C 中的 nil 不同，Objective-C 中的 nil 表示指向不存在对象的指针。</span></span><br><span class="line"><span class="comment">//任何 Swift 类型或实例可以为 nil</span></span><br><span class="line"><span class="keyword">var</span> statelessPerson:<span class="type">Person?</span> = <span class="literal">nil</span>  </span><br><span class="line"><span class="keyword">var</span> statelessPlace:<span class="type">Place?</span> = <span class="literal">nil</span>  </span><br><span class="line"><span class="keyword">var</span> statelessInt:<span class="type">Int?</span> = <span class="literal">nil</span>  </span><br><span class="line"><span class="keyword">var</span> statelessString:<span class="type">String?</span> = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// super：在子类中，暴露父类的方法、属性、下标。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printName</span><span class="params">()</span></span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Printing a name. "</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> : <span class="title">Person</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">printName</span><span class="params">()</span></span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">super</span>.printName()  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Hello World!"</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aDev = <span class="type">Programmer</span>()  </span><br><span class="line">aDev.printName() <span class="comment">//打印 Printing a name. Hello World!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// self：任何类型的实例都拥有的隐式属性，等同于实例本身。此外还可以用于区分函数参数和成员属性名称相同的情况。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printSelf</span><span class="params">()</span></span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"This is me: (self)"</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aPerson = <span class="type">Person</span>()  </span><br><span class="line">aPerson.printSelf() <span class="comment">//打印 "This is me: Person"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Self：在协议中，表示遵守当前协议的实体类型。</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Printable</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printTypeTwice</span><span class="params">(otherMe:<span class="keyword">Self</span>)</span></span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> : <span class="title">Printable</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printTypeTwice</span><span class="params">(otherMe: Foo)</span></span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"I am me plus (otherMe)"</span>)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aFoo = <span class="type">Foo</span>()  </span><br><span class="line"><span class="keyword">let</span> anotherFoo = <span class="type">Foo</span>()</span><br><span class="line">aFoo.printTypeTwice(otherMe: anotherFoo) <span class="comment">//打印 I am me plus Foo()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// Type：表示任意类型的类型，包括类类型、结构类型、枚举类型、协议类型。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Programmer</span> : <span class="title">Person</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aDev:<span class="type">Programmer</span>.<span class="type">Type</span> = <span class="type">Programmer</span>.<span class="keyword">self</span></span><br></pre></td></tr></table></figure><h3 id="自定义运算符相关的关键字"><a class="markdownIt-Anchor" href="#自定义运算符相关的关键字"></a> 自定义运算符相关的关键字</h3><h5 id="keywordleftright-prefix-postfixinfixoperatorassociativity-precedence"><a class="markdownIt-Anchor" href="#keywordleftright-prefix-postfixinfixoperatorassociativity-precedence"></a> Keyword：<code>left</code>，<code>right</code>, <code>prefix</code>， <code>postfix</code>，<code>infix</code>，<code>operator</code>，<code>associativity</code>， <code>precedence</code></h5><p>Description： <a href="https://nshipster.cn/swift-operators/" target="_blank" rel="noopener">参考</a></p><h5 id="keyword-none"><a class="markdownIt-Anchor" href="#keyword-none"></a> Keyword: <code>none</code></h5><p>Description: 一个没有结合性的运算符。不允许这样的运算符相邻出现。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// "&lt;" 是非结合性的运算符</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span> <span class="comment">//编译失败</span></span><br></pre></td></tr></table></figure><h3 id="内存管理相关的关键字"><a class="markdownIt-Anchor" href="#内存管理相关的关键字"></a> 内存管理相关的关键字</h3><h5 id="keyword-weak-unowned"><a class="markdownIt-Anchor" href="#keyword-weak-unowned"></a> Keyword: <code>weak</code>, <code>unowned</code></h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// unowned：让循环引用中的实例 A 不要强引用实例 B。前提条件是实例 B 的生命周期要长于 A 实例。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> occupation:<span class="type">Job?</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当 Person 实例不存在时，job 也不会存在。job 的生命周期取决于持有它的 Person。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Job</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">unowned</span> <span class="keyword">let</span> employee:<span class="type">Person</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(with employee:<span class="type">Person</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">self</span>.employee = employee  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// weak：允许循环引用中的实例 A 弱引用实例 B ，而不是强引用。实例 B 的生命周期更短，并会被先释放。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> residence:<span class="type">House?</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> occupant:<span class="type">Person?</span>  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me:<span class="type">Person?</span> = <span class="type">Person</span>()  </span><br><span class="line"><span class="keyword">var</span> myHome:<span class="type">House?</span> = <span class="type">House</span>()</span><br><span class="line"></span><br><span class="line">me!.residence = myHome  </span><br><span class="line">myHome!.occupant = me</span><br><span class="line"></span><br><span class="line">me = <span class="literal">nil</span>  </span><br><span class="line">myHome!.occupant <span class="comment">// myHome 等于 nil</span></span><br></pre></td></tr></table></figure><h3 id="以开头的关键字"><a class="markdownIt-Anchor" href="#以开头的关键字"></a> 以#开头的关键字</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// #available：基于平台参数，通过 if，while，guard 语句的条件，在运行时检查 API 的可用性。</span></span><br><span class="line"><span class="keyword">if</span> #available(iOS <span class="number">10</span>, *)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"iOS 10 APIs are available"</span>)  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// #colorLiteral：在 playground 中使用的字面表达式，用于创建颜色选取器，选取后赋值给变量。</span></span><br><span class="line"><span class="keyword">let</span> aColor = #colorLiteral <span class="comment">//创建颜色选取器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// #column：一种特殊的字面量表达式，用于获取字面量表示式的起始列数。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printInfo</span><span class="params">()</span></span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Some person info - on column (#column)"</span>)</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aPerson = <span class="type">Person</span>()  </span><br><span class="line">aPerson.printInfo() <span class="comment">//Some person info - on column 53</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// #else：条件编译控制语句，用于控制程序在不同条件下执行不同代码。与 #if 语句结合使用。当条件为 true，执行对应代码。当条件为 false，执行另一段代码。</span></span><br><span class="line">#<span class="keyword">if</span> os(iOS)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Compiled for an iOS device"</span>)  </span><br><span class="line">#<span class="keyword">else</span>  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Not on an iOS device"</span>)  </span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"><span class="comment">/// #elseif：条件编译控制语句，用于控制程序在不同条件下执行代码。与 #if 语句结合使用。当条件为 true，执行对应代码。</span></span><br><span class="line">#<span class="keyword">if</span> os(iOS)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Compiled for an iOS device"</span>)  </span><br><span class="line">#elseif os(macOS)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Compiled on a mac computer"</span>)  </span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"><span class="comment">/// #endif：条件编译控制语句，用于控制程序在不同条件下执行代码。用于表明条件编译代码的结尾。</span></span><br><span class="line">#<span class="keyword">if</span> os(iOS)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Compiled for an iOS device"</span>)  </span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"><span class="comment">/// #file：特殊字面量表达式，返回当前代码所在源文件的名称。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printInfo</span><span class="params">()</span></span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Some person info - inside file (#file)"</span>)</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aPerson = <span class="type">Person</span>()  </span><br><span class="line">aPerson.printInfo() <span class="comment">//Some person info - inside file /*代码所在 playground 文件路径*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// #fileReference：playground 字面量语法，用于创建文件选取器，选取并返回 NSURL 实例。</span></span><br><span class="line"><span class="keyword">let</span> fontFilePath = #fileReference <span class="comment">//创建文件选取器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// #function：特殊字面量表达式，返回函数名称。在方法中，返回方法名。在属性的 getter 或者 setter 中，返回属性名。在特殊的成员中，比如 init 或 subscript 中，返回关键字名称。在文件的最顶层时，返回当前所在模块名称。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printInfo</span><span class="params">()</span></span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Some person info - inside function (#function)"</span>)</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aPerson = <span class="type">Person</span>()  </span><br><span class="line">aPerson.printInfo() <span class="comment">//Some person info - inside function printInfo()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// #if：条件编译控制语句，用于控制程序在不同条件下编译代码。通过判断条件，决定是否执行代码。</span></span><br><span class="line">#<span class="keyword">if</span> os(iOS)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Compiled for an iOS device"</span>)  </span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"><span class="comment">/// #imageLiteral：playground 字面量语法，创建图片选取器，选择并返回 UIImage 实例。</span></span><br><span class="line"><span class="keyword">let</span> anImage = #imageLiteral <span class="comment">//在 playground 文件中选取图片</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// #line：特殊字面量表达式，用于获取当前代码的行数。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">printInfo</span><span class="params">()</span></span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Some person info - on line number (#line)"</span>)</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> aPerson = <span class="type">Person</span>()  </span><br><span class="line">aPerson.printInfo() <span class="comment">//Some person info - on line number 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/// #selector：用于创建 Objective-C selector 的表达式，可以静态检查方法是否存在，并暴露给 Objective-C。</span></span><br><span class="line"><span class="comment">//静态检查，确保 doAnObjCMethod 方法存在  </span></span><br><span class="line">control.sendAction(#selector(doAnObjCMethod), to: target, forEvent: event)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// #sourceLocation：行控制语句，可以指定与原先完全不同的行数和源文件名。通常在 Swift 诊断、debug 时使用。</span></span><br><span class="line">#sourceLocation(file:<span class="string">"foo.swift"</span>, line:<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 打印新值</span></span><br><span class="line"><span class="built_in">print</span>(#file)  </span><br><span class="line"><span class="built_in">print</span>(#line)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置行数和文件名</span></span><br><span class="line">#sourceLocation()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(#file)  </span><br><span class="line"><span class="built_in">print</span>(#line)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IjkPlayer 从编译集成到简单音频播放器的封装 [Android &amp; iOS] 一</title>
      <link href="/audio/ijkplayer_01/"/>
      <url>/audio/ijkplayer_01/</url>
      
        <content type="html"><![CDATA[<h2 id="编译篇android"><a class="markdownIt-Anchor" href="#编译篇android"></a> 编译篇【Android】</h2><h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3><p>IjkPlayer 是 <code>bilibili</code> 团队出品的一款基于 FFmpeg 的轻量级的音视频播放器。<br><br>官方地址： <a href="https://github.com/bilibili/ijkplayer" target="_blank" rel="noopener">ijkplayer</a><br><br>由于我所在项目需要一款音频播放器，所以后面都是基于这个大前提来做的。</p><h3 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h3><ul><li>编译环境：macOS</li><li>所需要工具：homebrew 【软件包管理器】, git 【分散式版本控制工具】, yasm 【汇编编译器】</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 homebrew</span></span><br><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 git</span></span><br><span class="line">brew install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 yasm</span></span><br><span class="line">brew install yasm</span><br></pre></td></tr></table></figure><ul><li>配置环境变量：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add these lines to your ~/.bash_profile or ~/.profile or ~/.zshrc (取决于你使用的终端工具)</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_SDK=&lt;your sdk path&gt;</span><br><span class="line"><span class="built_in">export</span> ANDROID_NDK=&lt;your ndk path&gt; 【最好区别于你的开发环境变量配置】</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note： 由于 ijkplayer 代码比较古老了，NDK 环境最好选择 <code>14</code> 版本。 NDK 下载<a href="https://developer.android.com/ndk/downloads/older_releases.html#ndk-14b-downloads" target="_blank" rel="noopener">链接</a></strong></p></blockquote><h3 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h3><ul><li>通过 <code>git</code> 将 ijkplayer 源码 clone 到本地</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bilibili/ijkplayer.git &lt;you <span class="built_in">local</span> path&gt;</span><br></pre></td></tr></table></figure><ul><li>下载 FFmpeg</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./init-android.sh</span><br></pre></td></tr></table></figure><ul><li>下载 OpenSSL, 增加 <code>https</code> 支持</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./init-android-openssl.sh</span><br></pre></td></tr></table></figure><ul><li>编译 OpenSSL</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> android/contrib</span><br><span class="line"></span><br><span class="line">./compile-openssl.sh clean</span><br><span class="line"></span><br><span class="line">./compile-openssl.sh all</span><br></pre></td></tr></table></figure><ul><li>编译 FFmpeg</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> android/contrib</span><br><span class="line"></span><br><span class="line">./compile-ffmpeg.sh clean</span><br><span class="line"></span><br><span class="line">./compile-ffmpeg.sh all</span><br></pre></td></tr></table></figure><ul><li>编译 ijkplayer</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">cd android</span><br><span class="line"></span><br><span class="line">./compile-ijk<span class="selector-class">.sh</span> clean</span><br><span class="line"></span><br><span class="line">./compile-ijk<span class="selector-class">.sh</span> all</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note: 编译说明：</strong><br></p><p><code>compile-openssl.sh</code> &amp; <code>compile-ffmpeg.sh</code> &amp; <code>compile-ijk.sh</code> 后面的参数代表要变哪个CPU架构的版本，默认是 <code>armv7a</code>；<br></p><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">armv5 armv7a arm64 x86 x86_64(指定编译哪个版本)</span><br><span class="line">all32（所有32位处理器版本，包含armv5 armv7a x86</span><br><span class="line">all （所有通用版本，包含armv5 armv7a arm64 x86 x86_64)</span><br><span class="line">clean （清除之前编译的缓存）</span><br><span class="line">check (检测支持的版本)</span><br></pre></td></tr></table></figure></blockquote><h3 id="编译-ffmpeg-说明"><a class="markdownIt-Anchor" href="#编译-ffmpeg-说明"></a> 编译 FFmpeg 说明</h3><p>编译 ffmpeg 时，根据自己的需求来确定你需要的是更多的 <code>codec/format</code>, 还是轻量级的 <code>codec/format</code> 就可以了。【官方文档有描述。后面将会专门讲配置特定需求的 codec/format】</p><ul><li>if you prefer more codec/format</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cd config</span><br><span class="line">rm module.sh</span><br><span class="line">ln -s module-default.sh module.sh</span><br><span class="line">cd android/contrib</span><br><span class="line"><span class="comment"># cd ios</span></span><br><span class="line">sh compile-ffmpeg.sh clean</span><br></pre></td></tr></table></figure><ul><li>if you prefer less codec/format for smaller binary size (include hevc function) 【hevc: HEVC是High Efficiency Video Coding的缩写，是一种新的视频压缩标准，用来以替代H.264/AVC编码标准，2013年1月26号，HEVC正式成为国际标准。】</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cd config</span><br><span class="line">rm module.sh</span><br><span class="line">ln -s module-lite-hevc.sh module.sh</span><br><span class="line">cd android/contrib</span><br><span class="line"><span class="comment"># cd ios</span></span><br><span class="line">sh compile-ffmpeg.sh clean</span><br></pre></td></tr></table></figure><ul><li>if you prefer less codec/format for smaller binnary size (by default)</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cd config</span><br><span class="line">rm module.sh</span><br><span class="line">ln -s module-lite.sh module.sh</span><br><span class="line">cd android/contrib</span><br><span class="line"><span class="comment"># cd ios</span></span><br><span class="line">sh compile-ffmpeg.sh clean</span><br></pre></td></tr></table></figure><h2 id="编译中遇到的问题"><a class="markdownIt-Anchor" href="#编译中遇到的问题"></a> 编译中遇到的问题</h2><h3 id="ndk-版本引起的问题强烈建议选择-r14b-版本上面有-ndk-下载链接"><a class="markdownIt-Anchor" href="#ndk-版本引起的问题强烈建议选择-r14b-版本上面有-ndk-下载链接"></a> NDK 版本引起的问题，<em><strong>强烈建议选择 <code>r14b</code> 版本，上面有 ndk 下载链接</strong></em></h3><ul><li>确认你的 NDK 版本是否大于等于 r10e</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">cat <span class="variable">$ANDROID_NDK</span>/source.properties</span><br><span class="line"></span><br><span class="line">Pkg<span class="selector-class">.Desc</span> = Android NDK</span><br><span class="line">Pkg<span class="selector-class">.Revision</span> = <span class="number">14.1</span>.<span class="number">3816874</span> <span class="comment">// 我的NDK版本</span></span><br></pre></td></tr></table></figure><ul><li>确定了你的 NDK 版本符合要求，还是报了如下错误</li></ul><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">You need <span class="keyword">the</span> NDKr10e <span class="keyword">or</span> later</span><br></pre></td></tr></table></figure><p>那么你就要需要修改如下代码, 把你的版本添加进版本检查中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> android/contrib/tool</span><br><span class="line"></span><br><span class="line">vim <span class="keyword">do</span>-detect-env.sh</span><br><span class="line"></span><br><span class="line">IJK_NDK_REL=$(grep -o <span class="string">'^Pkg\.Revision.*=[0-9]*.*'</span> <span class="variable">$ANDROID_NDK</span>/source.properties 2&gt;/dev/null | sed <span class="string">'s/[[:space:]]*//g'</span> | cut -d <span class="string">"="</span> -f 2)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"IJK_NDK_REL=<span class="variable">$IJK_NDK_REL</span>"</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$IJK_NDK_REL</span>"</span> <span class="keyword">in</span></span><br><span class="line">    11*|12*|13*|14*|15*|20*)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">test</span> -d <span class="variable">$&#123;ANDROID_NDK&#125;</span>/toolchains/arm-linux-androideabi-4.9</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"NDKr<span class="variable">$IJK_NDK_REL</span> detected"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"You need the NDKr10e or later"</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"You need the NDKr10e or later"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br></pre></td></tr></table></figure><ul><li>由于 ndk 兼容问题导致 standalone toolchain， 如果 <code>macOS</code> 遇到这个问题，可以将使用 <code>r14b</code> 版本的 NDK； 参考<a href="https://github.com/Bilibili/ijkplayer/issues/3378" target="_blank" rel="noopener">链接</a></li></ul><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">====================</span><br><span class="line">[<span class="strong">*] check archs</span></span><br><span class="line"><span class="strong">====================</span></span><br><span class="line"><span class="strong">FF_ALL_ARCHS = armv5 armv7a arm64 x86 x86_64</span></span><br><span class="line"><span class="strong">FF_ACT_ARCHS = armv5 armv7a arm64 x86 x86_64</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">--------------------</span></span><br><span class="line"><span class="strong">[*</span>] make NDK standalone toolchain</span><br><span class="line">--------------------</span><br><span class="line">build on Darwin x86<span class="emphasis">_64</span></span><br><span class="line"><span class="emphasis">ANDROID_</span>NDK=/Users/davidxiaoshuo/Documents/dev<span class="emphasis">_tools/android/sdk/ndk-bundle</span></span><br><span class="line"><span class="emphasis">IJK_</span>NDK<span class="emphasis">_REL=20.0.5594570</span></span><br><span class="line"><span class="emphasis">NDKr20.0.5594570 detected</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">[*] make NDK standalone toolchain</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">build on Darwin x86_</span>64</span><br><span class="line">ANDROID<span class="emphasis">_NDK=/Users/davidxiaoshuo/Documents/dev_</span>tools/android/sdk/ndk-bundle</span><br><span class="line">IJK<span class="emphasis">_NDK_</span>REL=20.0.5594570</span><br><span class="line">NDKr20.0.5594570 detected</span><br><span class="line">HOST<span class="emphasis">_OS=darwin</span></span><br><span class="line"><span class="emphasis">HOST_</span>EXE=</span><br><span class="line">HOST<span class="emphasis">_ARCH=x86_</span>64</span><br><span class="line">HOST<span class="emphasis">_TAG=darwin-x86_</span>64</span><br><span class="line">HOST<span class="emphasis">_NUM_</span>CPUS=12</span><br><span class="line">BUILD<span class="emphasis">_NUM_</span>CPUS=24</span><br><span class="line">Auto-config: --arch=arm</span><br><span class="line">ERROR: Failed to create toolchain.</span><br></pre></td></tr></table></figure><h3 id="其他方面导致的问题"><a class="markdownIt-Anchor" href="#其他方面导致的问题"></a> 其他方面导致的问题</h3><ul><li>编译模型脚本 （<a href="http://module.sh" target="_blank" rel="noopener">module.sh</a>）导致的问题</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attribute">WARNING</span>: arm-linux-androideabi-pkg-config not found, library detection may fail.</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line">[*] compile ffmpeg</span><br><span class="line">--------------------</span><br><span class="line">In file included from ./libavutil/internal.h:42:0,</span><br><span class="line">                 from ./libavutil/common.h:467,</span><br><span class="line">                 from ./libavutil/avutil.h:296,</span><br><span class="line">                 from ./libavutil/opt.h:31,</span><br><span class="line">                 from libavfilter/af_adelay.c:22:</span><br><span class="line">./libavutil/timer.h:38:31: fatal error: linux/perf_event.h: No such file or directory</span><br><span class="line"> # include &lt;linux/perf_event.h&gt;</span><br><span class="line">                               ^</span><br><span class="line">compilation terminated.</span><br><span class="line">In file included from ./libavutil/internal.h:42:0,</span><br><span class="line">                 from ./libavutil/common.h:467,</span><br><span class="line">                 from ./libavutil/avutil.h:296,</span><br><span class="line">                 from libavfilter/avfilter.h:41,</span><br><span class="line">                 from libavfilter/audio.h:25,</span><br><span class="line">                 from libavfilter/af_acopy.c:19:</span><br><span class="line">./libavutil/timer.h:38:31: fatal error: linux/perf_event.h: No such file or directory</span><br><span class="line"> # include &lt;linux/perf_event.h&gt;</span><br></pre></td></tr></table></figure><p>可以在 <code>module.sh</code> 最后添加 <code>export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --disable-linux-perf&quot;</code> 这行代码。 参考<a href="https://github.com/Bilibili/ijkplayer/issues/4043" target="_blank" rel="noopener">链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Jni 一</title>
      <link href="/android/android_jni_one/"/>
      <url>/android/android_jni_one/</url>
      
        <content type="html"><![CDATA[<h2 id="通过-android-studio-创建一个-native-c-的工程"><a class="markdownIt-Anchor" href="#通过-android-studio-创建一个-native-c-的工程"></a> 通过 Android Studio 创建一个 <code>Native C++</code> 的工程</h2><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/android_studio_native_cplus_screenshot.png" alt></p><blockquote><p><strong>本文中选用 C++11 进行开发</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio Gradle&#39;s Logger</title>
      <link href="/android/android_gradle_logger/"/>
      <url>/android/android_gradle_logger/</url>
      
        <content type="html"><![CDATA[<p><strong>前言:</strong> 我们在通过 Android Studio 进行 android 开发的时候，难免需要在进行 Gradle 编译构建的时候需要输出一些信息来辅助我们进行配置调试，或是需要输出一些必要信息来提醒其他开发者，此时，我们就要了解下 gradle 的 log 打印相关辅助工具类了。</p><blockquote><p><strong>补充：Gradle -&gt; 构建系统工具，它的 DSL 基于 Groovy 实现</strong></p></blockquote><h3 id="日志级别"><a class="markdownIt-Anchor" href="#日志级别"></a> 日志级别</h3><table><thead><tr><th style="text-align:center">级别</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">ERROR</td><td style="text-align:center">错误信息</td></tr><tr><td style="text-align:center">QUIET</td><td style="text-align:center">重要信息</td></tr><tr><td style="text-align:center">WARNING</td><td style="text-align:center">警告信息</td></tr><tr><td style="text-align:center">LIFECYCLE</td><td style="text-align:center">进度信息</td></tr><tr><td style="text-align:center">INFO</td><td style="text-align:center">内容信息</td></tr><tr><td style="text-align:center">DEBUG</td><td style="text-align:center">调试信息</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.gradle.api.logging;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The log levels supported by Gradle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> LogLevel &#123;</span><br><span class="line">    DEBUG,</span><br><span class="line">    INFO,</span><br><span class="line">    LIFECYCLE,</span><br><span class="line">    WARN,</span><br><span class="line">    QUIET,</span><br><span class="line">    ERROR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日志开关选项"><a class="markdownIt-Anchor" href="#日志开关选项"></a> 日志开关选项</h3><table><thead><tr><th style="text-align:center">开关选项</th><th style="text-align:center">输出的日志级别</th></tr></thead><tbody><tr><td style="text-align:center">无选项</td><td style="text-align:center">LIFECYCLE及更高级别</td></tr><tr><td style="text-align:center">-q 或 --quiet</td><td style="text-align:center">QUIRT及更高级别</td></tr><tr><td style="text-align:center">-i 或 --info</td><td style="text-align:center">INFO及更高级别</td></tr><tr><td style="text-align:center">-d 或 --debug</td><td style="text-align:center">DEBUG及更高级别(全部日志)</td></tr></tbody></table><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">// 输出 INFO及更高级别的日志</span><br><span class="line">gradle -i task</span><br></pre></td></tr></table></figure><p><em><strong>提醒： Android Studio 默认情况开启的是<code>LIFECYCLE及更高级别</code>, 所以此时在通过 Android Studio 进行默认 Build 操作时，此时在 Build Output 控制台打印出来的是这个级别的，Info，Debug Log 并不会输出</strong></em></p><h3 id="在-gradle-中尝试打印log"><a class="markdownIt-Anchor" href="#在-gradle-中尝试打印log"></a> 在 gradle 中尝试打印Log</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">logger.error(<span class="string">'this is log of gradle, level ---&gt; error'</span>)</span><br><span class="line">logger.quiet(<span class="string">'this is log of gradle, level ---&gt; quiet'</span>)</span><br><span class="line">logger.warn(<span class="string">'this is log of gradle, level ---&gt; warn'</span>)</span><br><span class="line">logger.lifecycle(<span class="string">'this is log of gradle, level ---&gt; lifecycle'</span>)</span><br><span class="line">logger.info(<span class="string">'this is log of gradle, level ---&gt; info'</span>)</span><br><span class="line">logger.debug(<span class="string">'this is log of gradle, level ---&gt; debug'</span>)</span><br></pre></td></tr></table></figure><p>在验证时，通过 <code>-d</code> 得到以下输出，验证 Log 级别</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [ERROR] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; error</span><br><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [QUIET] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; quiet</span><br><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [WARN] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; warn</span><br><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [LIFECYCLE] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; lifecycle</span><br><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [INFO] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; info</span><br><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [DEBUG] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; debug</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>printf</code> 在 gradle 中也是可以再 Build Output 控制台中输出 Log 的</strong></p></blockquote><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">07</span>:<span class="number">24</span><span class="variable">.545</span> [QUIET] [system<span class="variable">.out</span>] <span class="keyword">this</span> is log of gradle, <span class="keyword">event</span> ---&gt; printf</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android JNI 层 Log 输出</title>
      <link href="/android/jni_logger/"/>
      <url>/android/jni_logger/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述：</h3><p>android 中在进行一些 C++ 底层库开发的时候难免需要一些 log 来辅助我们的开发调试，或是打印一些重要信息给到 Lib 库的使用者。在 android 中，通过 C++ 层的 <code>print</code> Or <code>std::cout</code> 是无法在logcat 中正常显示 log 信息的。android NDK 专门提供了相关的 <a href="https://developer.android.com/ndk/reference/group/logging" target="_blank" rel="noopener">Logging</a> 工具。</p><h3 id="__android_log_print-主要使用的函数"><a class="markdownIt-Anchor" href="#__android_log_print-主要使用的函数"></a> __android_log_print 主要使用的函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __android_log_print(</span><br><span class="line">  <span class="keyword">int</span> prio,<span class="comment">//优先级</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *tag,<span class="comment">//标签</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt,  <span class="comment">// format log string</span></span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="cmake-编译-在-cmakeliststxt-中配置需要依赖的-log-系统库"><a class="markdownIt-Anchor" href="#cmake-编译-在-cmakeliststxt-中配置需要依赖的-log-系统库"></a> cmake 编译， 在 <code>CMakeLists.txt</code> 中配置需要依赖的 Log 系统库</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找要依赖的系统库</span></span><br><span class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">              log-<span class="class"><span class="keyword">lib</span></span></span><br><span class="line"></span><br><span class="line">              <span class="comment"># Specifies the name of the NDK library that</span></span><br><span class="line">              <span class="comment"># you want CMake to locate.</span></span><br><span class="line">              log )</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定要生成的动态库所依赖的库（系统库，外部第三方库）</span></span><br><span class="line">target_link_libraries( <span class="comment"># Specifies the target library.</span></span><br><span class="line">                       <span class="comment"># Links the target library to the log library</span></span><br><span class="line">                       <span class="comment"># included in the NDK.</span></span><br><span class="line">                       </span><br><span class="line">                       $&#123;log-<span class="class"><span class="keyword">lib</span>&#125; )</span></span><br></pre></td></tr></table></figure><h3 id="通过对-__android_log_print-稍加修改来使-log-输出变得更加简单"><a class="markdownIt-Anchor" href="#通过对-__android_log_print-稍加修改来使-log-输出变得更加简单"></a> 通过对 __android_log_print 稍加修改，来使 log 输出变得更加简单</h3><blockquote><p><strong>首先要引入所需的头文件</strong> <code>#include &lt;android/log.h&gt;</code></p></blockquote><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">#include &lt;android/<span class="keyword">log</span>.h&gt;</span><br><span class="line"></span><br><span class="line">#define <span class="built_in">TAG</span> <span class="string">"ProjectName"</span> <span class="comment">// 这个是自定义的LOG的标识   </span></span><br><span class="line"></span><br><span class="line">#define LOGD(<span class="params">...</span>) __android_log_print(ANDROID_LOG_DEBUG,<span class="built_in">TAG</span> ,__VA_ARGS__) <span class="comment">// 定义LOGD类型，在 Release 模式下禁用   </span></span><br><span class="line"></span><br><span class="line">#define LOGI(<span class="params">...</span>) __android_log_print(ANDROID_LOG_INFO,<span class="built_in">TAG</span> ,__VA_ARGS__) <span class="comment">// 定义LOGI类型   </span></span><br><span class="line"></span><br><span class="line">#define LOGW(<span class="params">...</span>) __android_log_print(ANDROID_LOG_WARN,<span class="built_in">TAG</span> ,__VA_ARGS__) <span class="comment">// 定义LOGW类型   </span></span><br><span class="line"></span><br><span class="line">#define LOGE(<span class="params">...</span>) __android_log_print(ANDROID_LOG_ERROR,<span class="built_in">TAG</span> ,__VA_ARGS__) <span class="comment">// 定义LOGE类型   </span></span><br><span class="line"></span><br><span class="line">#define LOGF(<span class="params">...</span>) __android_log_print(ANDROID_LOG_FATAL,<span class="built_in">TAG</span> ,__VA_ARGS__) <span class="comment">// 定义LOGF类型</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">char</span>* log_example_str = <span class="string">"hello logger"</span>;</span><br><span class="line"><span class="constructor">LOGD(<span class="string">"This is a log, the content is %s"</span>, <span class="params">log_example_str</span>)</span>;</span><br><span class="line"><span class="constructor">LOGI(<span class="string">"This is a log, the content is %s"</span>, <span class="params">log_example_str</span>)</span>;</span><br><span class="line"><span class="constructor">LOGW(<span class="string">"This is a log, the content is %s"</span>, <span class="params">log_example_str</span>)</span>;</span><br><span class="line"><span class="constructor">LOGE(<span class="string">"This is a log, the content is %s"</span>, <span class="params">log_example_str</span>)</span>;</span><br><span class="line"><span class="constructor">LOGF(<span class="string">"This is a log, the content is %s"</span>, <span class="params">log_example_str</span>)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/menu/"/>
      <url>/menu/</url>
      
        <content type="html"><![CDATA[<ul><li>Tech<ul><li>android<ul><li><a href="/android/cmake_list">android studio cmake 编译常规设置</a></li><li><a href="/android/jni_logger">Android Jni 层 Log 输出</a></li></ul></li><li>c++<ul><li><a href="/c++/cplus_type_convert">C++ 中 基础类型转换成 char*</a></li><li><a href="/c++/macos_remote_disk_mount">macos 远程硬盘挂载</a></li><li><a href="/c++/minicom_setup">USB 转串口工具 minicom Setup</a></li></ul></li><li>git<ul><li><a href="/git/git_multi_account_manager">Git 多github（gitlab）账号管理</a></li></ul></li><li>others<ul><li><a href="/others/hello_world">Hexo Page 简单发布流程</a></li><li><a href="/others/macos_terminal_themes">MacOS Terminal 美化 【程序猿推荐】</a></li></ul></li></ul></li><li>Life</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>USB 转串口工具 minicom Setup</title>
      <link href="/others/minicom_setup/"/>
      <url>/others/minicom_setup/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h3><ol><li>安装 minicom 串口调试工具, 通过 Homebrew 安装即可</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install minicom</span><br></pre></td></tr></table></figure><h3 id="setup"><a class="markdownIt-Anchor" href="#setup"></a> Setup</h3><ol><li>将串口线连接到电脑USB上，查看当前命令行查看连接的串口号</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /dev/tty*</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/serial_port_num.jpg" alt></p><blockquote><p><em><strong>上图中的 <code>/dev/tty.usbserial-14340</code> 就是 USB 的串口号</strong></em></p></blockquote><ol start="2"><li>将串口号配置给串口工具 <code>minicom</code></li></ol><ul><li>命令打开串口工具</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">minicom -s</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/minicom_board.jpg" alt></p><ul><li>通过键盘上的 <code>J</code>, <code>K</code> 或者方向键上下移动到 <code>Serial port setup</code> 选项，按回车选中，进入串口设置界面</li></ul><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/minicom_setup.jpg" alt></p><ul><li>通过键盘上的大写字母 <code>A</code> 选中进入 <code>Serial Device</code> 选项，并将之前复制好的串口号粘贴在此，并按***两次***回车, 回到主 Setup 界面。</li><li>定位到 <code>Save setup as dfl</code> 回车并选中。</li><li>定位到 <code>Exit</code> 退出 Setup 界面到 串口命令终端中 或 定位到 <code>Exit from minicom</code> 退回到系统命令界面</li></ul>]]></content>
      
      
      <categories>
          
          <category> DevEnv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macos 远程硬盘挂载</title>
      <link href="/others/macos_remote_disk_mount/"/>
      <url>/others/macos_remote_disk_mount/</url>
      
        <content type="html"><![CDATA[<h3 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h3><ol><li>安装Homebrew, 具体安装方式，见<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">官网</a></li><li>通过Homebrew 安装 sshfs 的依赖 <code>fuse</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install Caskroom/cask/osxfuse</span><br></pre></td></tr></table></figure><ol start="3"><li>通过Homebrew 安装sshfs</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install sshfs</span><br></pre></td></tr></table></figure><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sshfs remote_account@ip:remote_directory /<span class="built_in">local</span>/directory</span><br></pre></td></tr></table></figure><blockquote><p><strong>挂载到本地时，避免挂在到根目录下或者当前账户的主目录下，否则会引起以下错误：</strong></p></blockquote><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">mount_osxfuse: mount point /Users/xxxx/ImageFolder <span class="keyword">is</span> itself <span class="keyword">on</span> <span class="keyword">a</span> OSXFUSE volume</span><br><span class="line">fuse: failed <span class="keyword">to</span> mount <span class="keyword">file</span> <span class="built_in">system</span>: Invalid <span class="keyword">argument</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DevEnv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> env </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Home Page</title>
      <link href="/home/"/>
      <url>/home/</url>
      
        <content type="html"><![CDATA[<h2 id="home-page"><a class="markdownIt-Anchor" href="#home-page"></a> Home Page</h2><p>Hi, 这里是我记录我所感兴趣的技术，生活的地方。如果技术上有错误的地方欢迎联系我，并指正。</p><ul><li>昵称：David小硕</li><li>职业：移动端技术研发经理</li><li>主攻技术方向：Android; iOS; C++</li><li>公司：北京物灵科技有限公司</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 中 基础类型转换成 char *</title>
      <link href="/c++/cplus_type_convert/"/>
      <url>/c++/cplus_type_convert/</url>
      
        <content type="html"><![CDATA[<h1 id="c-中-基础类型转换成-char"><a class="markdownIt-Anchor" href="#c-中-基础类型转换成-char"></a> C++ 中 基础类型转换成 char*</h1><p>有时候我们在项目中难免会用到，将基础数据类型转换成char*，这样会方面一些业务上的开展。前一阵子做基于mips 平台下 阿里云Log Service时候就用到了，由于考虑要封装sdk的轻量性，所以没有考虑依赖其他的系统库。</p><h3 id="以下demo-代码依赖如下系统库"><a class="markdownIt-Anchor" href="#以下demo-代码依赖如下系统库"></a> 以下demo 代码依赖如下系统库，</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="基础数据类型的相互转换其实有多种方式-以下多是通过-printf-方式来完成的"><a class="markdownIt-Anchor" href="#基础数据类型的相互转换其实有多种方式-以下多是通过-printf-方式来完成的"></a> 基础数据类型的相互转换其实有多种方式。以下多是通过 <code>printf</code> 方式来完成的。</h3><h3 id="int-转-char"><a class="markdownIt-Anchor" href="#int-转-char"></a> int 转 char *</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">int_to_char_ptr</span><span class="params">(<span class="keyword">int</span> src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> result[<span class="number">30</span>] = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">"%d"</span>, src);</span><br><span class="line">    <span class="keyword">char</span>* ret_value = result;</span><br><span class="line">    <span class="keyword">return</span> ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="double-转-char"><a class="markdownIt-Anchor" href="#double-转-char"></a> double 转 char*</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">double_to_char_ptr</span><span class="params">(<span class="keyword">double</span> src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> result[<span class="number">30</span>] = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 如果需要保留小数x位数, eg: %.xlf</span></span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">"%lf"</span>, src);</span><br><span class="line">    <span class="keyword">char</span>* ret_value = result;</span><br><span class="line">    <span class="keyword">return</span> ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="float-转-char"><a class="markdownIt-Anchor" href="#float-转-char"></a> float 转 char*</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">float_to_char_ptr</span><span class="params">(<span class="keyword">float</span> src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> result[<span class="number">30</span>] = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 如果需要保留小数x位数, eg: %.xf</span></span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">"%f"</span>, src);</span><br><span class="line">    <span class="keyword">char</span>* ret_value = result;</span><br><span class="line">    <span class="keyword">return</span> ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="size_t-转-char"><a class="markdownIt-Anchor" href="#size_t-转-char"></a> size_t 转 char*</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">size_t_to_char_ptr</span><span class="params">(<span class="keyword">size_t</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> result[<span class="number">30</span>] = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">"%zu"</span>, value);</span><br><span class="line">    <span class="keyword">char</span> * ret_value = result;</span><br><span class="line">    <span class="keyword">return</span> ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string-转-char"><a class="markdownIt-Anchor" href="#string-转-char"></a> string 转 char*</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">str_to_char_array</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(value.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="char-转-string"><a class="markdownIt-Anchor" href="#char-转-string"></a> char* 转 string</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">char_ptr_to_str</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* value)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> res;</span><br><span class="line">    res = value;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS Terminal 美化 【程序猿推荐】</title>
      <link href="/others/macos_terminal_themes/"/>
      <url>/others/macos_terminal_themes/</url>
      
        <content type="html"><![CDATA[<h1 id="macos-terminal-美化-程序猿推荐"><a class="markdownIt-Anchor" href="#macos-terminal-美化-程序猿推荐"></a> MacOS Terminal 美化 【程序猿推荐】</h1><p><img src="https://travis-ci.org/joemccann/dillinger.svg?branch=master" alt></p><blockquote><p>工欲善其事，必先利其器</p></blockquote><p>我们在MacOS 下开发的时候不可避免一定为会用的terminal，不管你是server端选手，客户端选手，又或者是…哎呀，等等吧，总之terminal是我们在开发中使用评率比较高的基础开发工具了。但是原生的terminal，是一个及其简陋的家伙。那么怎么能让我们的terminal能够看起来既舒服又能超好用呢。动起手来…</p><h2 id="先晒一张我的terminal截图"><a class="markdownIt-Anchor" href="#先晒一张我的terminal截图"></a> 先晒一张我的terminal截图：</h2><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/terminal_screenshot.png" alt></p><h2 id="改造terminal步骤"><a class="markdownIt-Anchor" href="#改造terminal步骤"></a> 改造Terminal步骤</h2><ul><li><p><a href="https://ohmyz.sh" target="_blank" rel="noopener">安装oh-my-zsh</a></p></li><li><p>设置 oh-my-zsh <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">主题</a></p></li><li><p>安装 oh-my-zsh 日常所需的插件，以提高工作效率</p></li><li><p>修改 Terminal 的Profile，让我们的 Terminal 与 zsh 的主题更加匹配</p></li></ul><h2 id="准备工作可能会需要"><a class="markdownIt-Anchor" href="#准备工作可能会需要"></a> 准备工作(可能会需要)</h2><p>首先我们先安装MacOS 中比较好用的软件包管理器 <a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><h2 id="安装-oh-my-zsh"><a class="markdownIt-Anchor" href="#安装-oh-my-zsh"></a> 安装 oh-my-zsh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><h2 id="配置-oh-my-zsh-主题"><a class="markdownIt-Anchor" href="#配置-oh-my-zsh-主题"></a> 配置 oh-my-zsh 主题</h2><p>首先我们链接到 oh-my-zsh 主题的页面 --&gt; <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a><br>选择我们喜欢的主题，然后记住主题名字，这里我的主题名字是：<strong><u>pygmalion</u></strong></p><p>然后我们打开Terminal窗口输入以下命令对 .zshrc 文件进行编辑</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">// 将 ZSH_THEME 设置为即将要是用的主题名称</span><br><span class="line">ZSH_THEME=<span class="string">"pygmalion"</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/zshrc_screenshot.png" alt="如图"></p><p>设置成功后，退出vim。执行以下命令，使刚刚的设置生效：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>如果你细心你会发现实际上oh-my-zsh在安装的时候已经内置了很多的主题。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/themes // 主题目录</span><br><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/plugins // 插件所在目录</span><br></pre></td></tr></table></figure><h2 id="安装oh-my-zsh插件"><a class="markdownIt-Anchor" href="#安装oh-my-zsh插件"></a> 安装oh-my-zsh插件</h2><p>oh-my-zsh 的插件有很多，它本身内置的插件也有很多，但是我们在用的时候可以根据需要设置需要的即可。<em><strong>因为插件安装过多，一定程度上会使zsh的命令执行效率变低</strong></em></p><h2 id="zsh-syntax-highlighting"><a class="markdownIt-Anchor" href="#zsh-syntax-highlighting"></a> zsh-syntax-highlighting</h2><p>zsh 语法高亮插件，<a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">官方地址</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">//添加如下脚本</span><br><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>安装效果如下：</p><p><img src="https://raw.githubusercontent.com/zsh-users/zsh-syntax-highlighting/master/images/after2.png" alt></p><h2 id="修改-terminal-的profile导入我们想要的主题-我选择的是fideloper"><a class="markdownIt-Anchor" href="#修改-terminal-的profile导入我们想要的主题-我选择的是fideloper"></a> 修改 Terminal 的Profile，导入我们想要的主题 【我选择的是***Fideloper***】</h2><p><a href="https://github.com/lysyi3m/macos-terminal-themes" target="_blank" rel="noopener">macos-terminal-themes</a> 提供了丰富的主题供我们选择，我们可以在当中找一款与我们所选zsh主题相符合的主题。</p><ul><li>将 macos-terminal-themes 下载到本地</li><li>进入到 schemes 目录下</li><li>双击 *.terminal 的文件，将会打开一个所选主题的新的Terminal窗口</li><li>选择Terminal 工具栏中的 Shell -&gt; Use Setting as Default, 即将主题修改为所选主题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android studio cmake 编译常规设置</title>
      <link href="/android/cmake_list/"/>
      <url>/android/cmake_list/</url>
      
        <content type="html"><![CDATA[<h3 id="add_executable-指令"><a class="markdownIt-Anchor" href="#add_executable-指令"></a> add_executable 指令</h3><p>语法：<code>add_executable(executable_file_name [source])</code>将一组源文件 source 生成一个可执行文件。 source 可以是多个源文件，也可以是对应定义的变量 如：<code>add_executable(hello main.c)</code></p><h3 id="cmake_minimun_requiredversion-341"><a class="markdownIt-Anchor" href="#cmake_minimun_requiredversion-341"></a> cmake_minimun_required(VERSION 3.4.1)</h3><p>用来指定 CMake 最低版本为3.4.1，如果没指定，执行 cmake 命令时可能会出错</p><h3 id="add_subdirectory-指令"><a class="markdownIt-Anchor" href="#add_subdirectory-指令"></a> add_subdirectory 指令</h3><p>语法：<code>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code></p><p>这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置。<code>EXCLUDE_FROM_ALL</code>参数含义是将这个目录从编译过程中排除。</p><p>另外，也可以通过 SET 指令重新定义<code>EXECUTABLE_OUTPUT_PATH</code> 和 <code>LIBRARY_OUTPUT_PATH</code> 变量来指定最终的目标二进制的位置 (指最终生成的 hello 或者最终的共享库，不包含编译生成的中间文件)</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line">set(LIBRARY_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/<span class="class"><span class="keyword">lib</span>)</span></span><br></pre></td></tr></table></figure><h3 id="add_library-指令"><a class="markdownIt-Anchor" href="#add_library-指令"></a> add_library 指令</h3><p>语法：<code>add_library(libname [SHARED | STATIC | MODULE] [EXCLUDE_FROM_ALL] [source])</code></p><p>将一组源文件 source 编译出一个库文件，并保存为 <a href="http://libname.so" target="_blank" rel="noopener">libname.so</a> (lib 前缀是生成文件时 CMake自动添加上去的)。其中有三种库文件类型，<strong>不写的话，默认为 STATIC</strong>:</p><ul><li>SHARED: 表示动态库，可以在(Java)代码中使用<code>System.loadLibrary(name)</code>动态调用；</li><li>STATIC: 表示静态库，集成到代码中会在编译时调用；</li><li>MODULE: 只有在使用 dyId 的系统有效，如果不支持 dyId，则被当作 SHARED 对待；</li><li>EXCLUDE_FROM_ALL: 表示这个库不被默认构建，除非其他组件依赖或手工构建</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">#将compress<span class="selector-class">.c</span> 编译成 libcompress<span class="selector-class">.so</span> 的共享库</span><br><span class="line"><span class="function"><span class="title">add_library</span><span class="params">(compress SHARED compress.c)</span></span></span><br></pre></td></tr></table></figure><ul><li>add_library 命令也可以用来导入第三方的库:<code>add_library(libname [SHARED | STATIC | MODULE | UNKNOWN] IMPORTED)</code> 如，导入 <a href="http://libjpeg.so" target="_blank" rel="noopener">libjpeg.so</a></li></ul><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(libjpeg SHARED IMPORTED)</span><br></pre></td></tr></table></figure><p>导入库后，当需要使用 target_link_libraries 链接库时，可以直接使用该库</p><h3 id="find_library-指令"><a class="markdownIt-Anchor" href="#find_library-指令"></a> find_library 指令</h3><p>语法：<code>find_library(name1 path1 path2 …)</code>VAR 变量表示找到的库全路径，包含库文件名 。例如：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">find_library(libX  X11 /usr/<span class="class"><span class="keyword">lib</span>)</span></span><br><span class="line"></span><br><span class="line">find_library(log-<span class="class"><span class="keyword">lib</span> <span class="title">log</span>)</span></span><br><span class="line"><span class="comment">#路径为空，应该是查找系统环境变量路径</span></span><br></pre></td></tr></table></figure><h3 id="set_target_properties-指令"><a class="markdownIt-Anchor" href="#set_target_properties-指令"></a> set_target_properties 指令</h3><p>语法:<code>set_target_properties(target1 target2 … PROPERTIES prop1 value1 prop2 value2 …)</code>这条指令可以用来设置输出的名称（设置构建同名的动态库和静态库，或者指定要导入的库文件的路径），对于动态库，还可以用来指定动态库版本和 API 版本。如: <code>set_target_properties(hello_static PROPERTIES OUTPUT_NAME “hello”)</code> 设置同名的 hello 动态库和静态库：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">set_target_properties</span><span class="params">(hello PROPERTIES CLEAN_DIRECT_OUTPUT <span class="number">1</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">set_target_properties</span><span class="params">(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT <span class="number">1</span>)</span></span></span><br></pre></td></tr></table></figure><p>指定要导入的库文件的路径</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">add<span class="constructor">_library(<span class="params">jpeg</span> SHARED IMPORTED)</span></span><br><span class="line">#注意要先 add_library，再 set_target_properties</span><br><span class="line"></span><br><span class="line">set<span class="constructor">_target_properties(<span class="params">jpeg</span> PROPERTIES IMPORTED_LOCATION $&#123;PROJECT_SOURCE_DIR&#125;<span class="operator">/</span><span class="params">libs</span><span class="operator">/</span>$&#123;ANDROID_ABI&#125;<span class="operator">/</span><span class="params">libjpeg</span>.<span class="params">so</span>)</span></span><br></pre></td></tr></table></figure><p>设置动态库 hello 版本和 API 版本：<code>set_target_properties(hello PROPERTIES VERSION 1.2 SOVERSION 1)</code>和它对应的指令：<code>get\_target_property(VAR target property)</code>。如上面的例子，获取输出的库的名字</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">get_target_property</span><span class="params">(OUTPUT_VALUE hello_static OUTPUT_NAME)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">message</span><span class="params">(STATUS <span class="string">"this is the hello_static OUTPUT_NAME:"</span>$&#123;OUTPUT_VALUE&#125;)</span></span></span><br></pre></td></tr></table></figure><h3 id="include_directories-指令"><a class="markdownIt-Anchor" href="#include_directories-指令"></a> include_directories 指令</h3><p>语法：<code>include_directories([AFTER | BEFORE] [SYSTEM] dir1 dir2…)</code></p><p>这个指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割，如果路径中包含了空格，可以使用双引号将它括起来，默认的行为是追加到当前的头文件搜索路径的后面。</p><h3 id="target_link_libraries-指令"><a class="markdownIt-Anchor" href="#target_link_libraries-指令"></a> target_link_libraries 指令</h3><p>语法：<code>target_link_libraries(target library library2…)</code></p><p>这个指令可以用来为 target 添加需要的链接的共享库，同样也可以用于为自己编写的共享库添加共享库链接。如：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定 compress 工程需要用到 libjpeg 库和 log 库</span></span><br><span class="line">target_link_libraries(compress libjpeg $&#123;log-<span class="class"><span class="keyword">lib</span>&#125;)</span></span><br></pre></td></tr></table></figure><p>同样，link_directories(directory1 directory2 …) 可以添加非标准的共享库搜索路径。还有其他 file、list、install 、find_ 指令和控制指令等就不介绍了，详细可以查看手册。</p><h3 id="cmake-的常用变量"><a class="markdownIt-Anchor" href="#cmake-的常用变量"></a> CMake 的常用变量</h3><ul><li>变量引用方式</li></ul><p>使用 ${} 进行变量的引用。不过在 IF 等语句中，可以直接使用变量名而不用通过 ${} 取值</p><ul><li><p>自定义变量的方式</p><p>主要有隐式定义和显式定义两种。隐式定义，如 PROJECT 指令会隐式定义<code>_BINARY_DIR</code> 和<code>_SOURCE_DIR</code>而对于显式定义就是通过 SET 指令来定义。如：set(HELLO_SRC main.c)</p></li><li><p>CMake 常用变量</p><ul><li><code>CMAKE_BINARY_DIR, PROJECT_BINARY_DIR, _BINARY_DIR</code>这三个变量指代的内容都是一样的，如果是 in-source 编译，指的是工程顶层目录，如果是 out-of-source 编译，指的是工程编译发生的目录。</li><li><code>CMAKE_SOURCE_DIR, PROJECT_SOURCE_DIR, _SOURCE_DIR</code>这三个变量指代的内容也是一样的，不论哪种编译方式，都是工程顶层目录。</li><li><code>CMAKE_CURRENT_SOURCE_DIR</code>当前处理的 CMakeLists.txt 所在的路径</li><li><code>CMAKE_CURRENT_BINARY_DIR</code>如果是 in-source 编译，它跟 CMAKE_CURRENT_SOURCE_DIR 一致，如果是 <code>out-of-source</code> 编译，指的是 target 编译目录。使用 ADD_SUBDIRECTORY(src bin)可以修改这个变量的值；而使用 <code>SET(EXECUTABLE_OUTPUT_PATH &amp;lt; 新路径&amp;gt;)</code> 并不会对这个变量造成影响，它仅仅修改了最终目标文件存放的路径。</li><li><code>CMAKE_CURRENT_LIST_FILE</code> 输出调用这个变量的 CMakeLists.txt 的完整路径</li><li><code>CMAKE_CURRENT_LIST_LINE</code> 输出这个变量所在的行</li><li><code>CMAKE_MODULE_PATH</code> 这个变量用来定义自己的 CMake 模块所在的路径。如果你的工程比较复杂，有可能会自己编写一些 cmake 模块，这些 cmake 模块是随你的工程发布的，为了让 cmake 在处理 CMakeLists.txt 时找到这些模块，你需要通过 SET 指令，将自己的 cmake 模块路径设置一下。比如：<code>SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)</code> 这时候你就可以通过 INCLUDE 指令来调用自己的模块了。</li><li><code>EXECUTABLE_OUTPUT_PATH</code> 和 <code>LIBRARY_OUTPUT_PATH</code>分别用来重新定义最终结果的存放目录，前面我们已经提到了这两个变量。</li><li><code>PROJECT_NAME</code>返回通过 PROJECT 指令定义的项目名称。</li></ul></li></ul><h3 id="android-cmake-的使用"><a class="markdownIt-Anchor" href="#android-cmake-的使用"></a> Android CMake 的使用</h3><h4 id="cmakelisttxt-的编写"><a class="markdownIt-Anchor" href="#cmakelisttxt-的编写"></a> CMakeList.txt 的编写</h4><p>再回归到 Android NDK 开发中 CMake 的使用，先看一个系统生成的 NDK 项目的 CMakeLists.txt 的配置：(去掉原有的注释)</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置编译 native library 需要最小的 cmake 版本</span></span><br><span class="line">cmake_minimum_required(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 将指定的源文件编译为名为 libnative-lib.so 的动态库</span></span><br><span class="line">add_library</span><br><span class="line">(native-<span class="class"><span class="keyword">lib</span> <span class="title">SHARED</span> <span class="title">src</span>/<span class="title">main</span>/<span class="title">cpp</span>/<span class="title">native</span>-<span class="title">lib</span>.<span class="title">cpp</span>)</span></span><br><span class="line"><span class="comment"># 查找本地 log 库</span></span><br><span class="line">find_library</span><br><span class="line">(log-<span class="class"><span class="keyword">lib</span> <span class="title">log</span>)</span></span><br><span class="line"><span class="comment"># 将预构建的库添加到自己的原生库</span></span><br><span class="line">target_link_libraries</span><br><span class="line">(native-<span class="class"><span class="keyword">lib</span> $&#123;<span class="title">log</span>-<span class="title">lib</span>&#125;)</span></span><br></pre></td></tr></table></figure><p>复杂一点的 CMakeLists，这是一个本地使用 <a href="http://libjpeg.so" target="_blank" rel="noopener">libjpeg.so</a> 来做图片压缩的项目</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"><span class="comment">#设置生成的so动态库最后输出的路径</span></span><br><span class="line">set(CMAKE_LIBRARY_OUTPUT_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;/src/main/jniLibs/$&#123;ANDROID_ABI&#125;)</span><br><span class="line"><span class="comment">#指定要引用的libjpeg.so的头文件目录</span></span><br><span class="line">set(LIBJPEG_INCLUDE_DIR src/main/cpp/<span class="keyword">include</span>)</span><br><span class="line">include_directories($&#123;LIBJPEG_INCLUDE_DIR&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入libjpeg动态库 SHARED；静态库为STATIC</span></span><br><span class="line">add_library(jpeg SHARED IMPORTED)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对应so目录，注意要先 add_library，再 set_target_properties）</span></span><br><span class="line">set_target_properties(jpeg PROPERTIES IMPORTED_LOCATION $&#123;PROJECT_SOURCE_DIR&#125;/libs/$&#123;ANDROID_ABI&#125;/libjpeg.so)</span><br><span class="line"></span><br><span class="line">add_library(compress SHARED src/main/cpp/compress.c)</span><br><span class="line"></span><br><span class="line">find_library(graphics jnigraphics)</span><br><span class="line">find_library(log-<span class="class"><span class="keyword">lib</span> <span class="title">log</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加链接上面个所 find 和 add 的 library</span></span><br><span class="line">target_link_libraries(compress jpeg $&#123;log-<span class="class"><span class="keyword">lib</span>&#125; $&#123;<span class="title">graphics</span>&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="配置-gradle"><a class="markdownIt-Anchor" href="#配置-gradle"></a> 配置 Gradle</h4><p>简单的配置如下，至于 cppFlags 或 cFlags 的参数有点复杂，一般设置为空或不设置也是可以的，这里就不过多介绍了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">compileSdkVersion <span class="number">25</span></span><br><span class="line">buildToolsVersion <span class="string">"25.0.3"</span></span><br><span class="line"></span><br><span class="line">defaultConfig &#123;</span><br><span class="line">    minSdkVersion <span class="number">15</span></span><br><span class="line">    targetSdkVersion <span class="number">25</span></span><br><span class="line">    versionCode <span class="number">1</span></span><br><span class="line">    versionName <span class="string">"1.0"</span></span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            <span class="comment">// Passes optional arguments to CMake.</span></span><br><span class="line">            <span class="built_in">arguments</span> </span><br><span class="line">            <span class="string">"-DANDROID_ARM_NEON=TRUE"</span>,</span><br><span class="line">            <span class="string">"-DANDROID_TOOLCHAIN=clang"</span></span><br><span class="line">            <span class="comment">// Sets optional flags for the C compiler.</span></span><br><span class="line">            cFlags <span class="string">"-D_EXAMPLE_C_FLAG1"</span>,<span class="string">"-D_EXAMPLE_C_FLAG2"</span></span><br><span class="line">            <span class="comment">// Sets a flag to enable format macro constants for the C++ compiler.</span></span><br><span class="line">            cppFlags <span class="string">"-D__STDC_FORMAT_MACROS"</span></span><br><span class="line">            <span class="comment">//生成.so库的目标平台</span></span><br><span class="line">            abiFilters <span class="string">'x86'</span>,<span class="string">'x86_64'</span>,<span class="string">'armeabi'</span>,<span class="string">'armeabi-v7a'</span>,<span class="string">'arm64-v8a'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置 CMakeLists.txt 路径</span></span><br><span class="line">externalNativeBuild &#123;</span><br><span class="line">     cmake &#123;</span><br><span class="line">        path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> jni </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 多github（gitlab）账号管理</title>
      <link href="/git/git_multi_account_manager/"/>
      <url>/git/git_multi_account_manager/</url>
      
        <content type="html"><![CDATA[<p>场景：很多时候我们有公司的github的账号同时自己私下还可能会有多个git平台的账号（如：github，gitlab）。这时候在管理git账号，指定哪个项目用哪个账号，放在哪个账户的仓库下，就显得尤为重要了。下面简单说下如何配置git config 文件去管理这些git平台账号。</p><h4 id="1-生成ssh-key"><a class="markdownIt-Anchor" href="#1-生成ssh-key"></a> 1. 生成ssh-key</h4><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@company.com” -f ~/.ssh/id-rsa</span></span><br></pre></td></tr></table></figure><p><strong>explain</strong>：这样在~/.ssh/目录下就会生成id-rsa和id-rsa.pub的公钥和私钥。其中id-rsa 我们可以根据我们自己的需求来定义名称，例如我的名称personal-github-id-rsa(私人），company-github-id-rsa（公司github），company-gitlab-id-rsa（公司gitlab）。生成ssh-key 后我们可以copy 公钥到各git平台</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>pbcopy &lt; ~<span class="regexp">/.ssh/id</span>-rsa</span><br></pre></td></tr></table></figure><p>通过上面的命令将公钥copy到剪贴板，然后到git平台的ssh-key页面直接粘贴即可。</p><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/mybook/master/assets/remote_repository_ssh_url.png" alt></p><h4 id="2-添加私钥"><a class="markdownIt-Anchor" href="#2-添加私钥"></a> 2. 添加私钥</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$ ssh-<span class="keyword">add</span><span class="bash"> ~/.ssh/id-rsa</span></span><br></pre></td></tr></table></figure><p>将私钥添加到我们本地ssh中</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过 ssh-add -l 来确私钥列表</span></span><br><span class="line">$ ssh-<span class="keyword">add</span><span class="bash"> -l</span></span><br><span class="line"><span class="comment"># 可以通过 ssh-add -D 来清空私钥列表</span></span><br><span class="line">$ ssh-<span class="keyword">add</span><span class="bash"> -D</span></span><br></pre></td></tr></table></figure><h4 id="3-创建多账号管理文件"><a class="markdownIt-Anchor" href="#3-创建多账号管理文件"></a> 3. 创建多账号管理文件</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">touch ~/.ssh/config</span><br><span class="line">vim config</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitlab    </span></span><br><span class="line"><span class="attr">Host</span> <span class="string">gitlab.com</span></span><br><span class="line">     <span class="attr">HostName</span> <span class="string">gitlab.com</span></span><br><span class="line">     <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line">     <span class="attr">IdentityFile</span> <span class="string">~/.ssh/company-gitlab-id-rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">github-company</span></span><br><span class="line">     <span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line">     <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line">     <span class="attr">IdentityFile</span> <span class="string">~/.ssh/company-github-id-rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#personal-github</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">github-personal</span></span><br><span class="line">     <span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line">     <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line">     <span class="attr">IdentityFile</span> <span class="string">~/.ssh/personal-github-rsa</span></span><br></pre></td></tr></table></figure><p><strong>explain</strong>: Host 这里可以理解为我们为实际的host（如：<a href="http://github.com" target="_blank" rel="noopener">github.com</a>）起的别名，HostName才是实际的host address值，这样我们在本地仓库指定远程仓库的时候就可以区分出同一个平台下的不同账号体系了，可以通过下面的remote repository 地址可以看出。</p><h4 id="4-为本地仓库指定远程仓库地址"><a class="markdownIt-Anchor" href="#4-为本地仓库指定远程仓库地址"></a> 4. 为本地仓库指定远程仓库地址</h4><h5 id="41-远程仓库地址从github中直接复制显示"><a class="markdownIt-Anchor" href="#41-远程仓库地址从github中直接复制显示"></a> 4.1 远程仓库地址，从github中直接复制显示：</h5><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/mybook/master/assets/remote_repository_ssh_url.png" alt></p><h5 id="42-实际为本地仓库指定远程仓库地址需要这样"><a class="markdownIt-Anchor" href="#42-实际为本地仓库指定远程仓库地址需要这样"></a> 4.2 实际为本地仓库指定远程仓库地址需要这样：</h5><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">添加地址：<span class="string">git </span><span class="string">remote </span><span class="string">add </span><span class="string">origin </span><span class="string">git@</span><span class="string">github-personal:Davidxiaoshuo/</span><span class="string">EmotionCalendar.</span><span class="string">git</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">重</span>定向地址：<span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">git@</span><span class="string">github-personal:Davidxiaoshuo/</span><span class="string">EmotionCalendar.</span><span class="string">git</span></span><br></pre></td></tr></table></figure><p><strong>explain</strong>: 其中git@后面的字段为我们在config配置文件中的Host的值</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/others/hello_world/"/>
      <url>/others/hello_world/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-page-简单发布流程"><a class="markdownIt-Anchor" href="#hexo-page-简单发布流程"></a> Hexo Page 简单发布流程</h1><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
