<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IjkPlayer 从编译集成到简单音频播放器的封装 [Android &amp; iOS] 一</title>
      <link href="/audio/ijkplayer_01/"/>
      <url>/audio/ijkplayer_01/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><h2 id="编译篇android"><a class="markdownIt-Anchor" href="#编译篇android"></a> 编译篇【Android】</h2><h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3><p>IjkPlayer 是 <code>bilibili</code> 团队出品的一款基于 FFmpeg 的轻量级的音视频播放器。<br><br>官方地址： <a href="https://github.com/bilibili/ijkplayer" target="_blank" rel="noopener">ijkplayer</a><br><br>由于我所在项目需要一款音频播放器，所以后面都是基于这个大前提来做的。</p><h3 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h3><ul><li>编译环境：macOS</li><li>所需要工具：homebrew 【软件包管理器】, git 【分散式版本控制工具】, yasm 【汇编编译器】</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 homebrew</span></span><br><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 git</span></span><br><span class="line">brew install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 yasm</span></span><br><span class="line">brew install yasm</span><br></pre></td></tr></table></figure><ul><li>配置环境变量：</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># add these lines to your ~/.bash_profile or ~/.profile or ~/.zshrc (取决于你使用的终端工具)</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_SDK=&lt;your sdk path&gt;</span><br><span class="line"><span class="built_in">export</span> ANDROID_NDK=&lt;your ndk path&gt; 【最好区别于你的开发环境变量配置】</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note： 由于 ijkplayer 代码比较古老了，NDK 环境最好选择 <code>14</code> 版本。 NDK 下载<a href="https://developer.android.com/ndk/downloads/older_releases.html#ndk-14b-downloads" target="_blank" rel="noopener">链接</a></strong></p></blockquote><h3 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h3><ul><li>通过 <code>git</code> 将 ijkplayer 源码 clone 到本地</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/bilibili/ijkplayer.git &lt;you <span class="built_in">local</span> path&gt;</span><br></pre></td></tr></table></figure><ul><li>下载 FFmpeg</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./init-android.sh</span><br></pre></td></tr></table></figure><ul><li>下载 OpenSSL, 增加 <code>https</code> 支持</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./init-android-openssl.sh</span><br></pre></td></tr></table></figure><ul><li>编译 OpenSSL</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> android/contrib</span><br><span class="line"></span><br><span class="line">./compile-openssl.sh clean</span><br><span class="line"></span><br><span class="line">./compile-openssl.sh all</span><br></pre></td></tr></table></figure><ul><li>编译 FFmpeg</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> android/contrib</span><br><span class="line"></span><br><span class="line">./compile-ffmpeg.sh clean</span><br><span class="line"></span><br><span class="line">./compile-ffmpeg.sh all</span><br></pre></td></tr></table></figure><ul><li>编译 ijkplayer</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">cd android</span><br><span class="line"></span><br><span class="line">./compile-ijk<span class="selector-class">.sh</span> clean</span><br><span class="line"></span><br><span class="line">./compile-ijk<span class="selector-class">.sh</span> all</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note: 编译说明：</strong><br></p><p><code>compile-openssl.sh</code> &amp; <code>compile-ffmpeg.sh</code> &amp; <code>compile-ijk.sh</code> 后面的参数代表要变哪个CPU架构的版本，默认是 <code>armv7a</code>；<br></p><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">armv5 armv7a arm64 x86 x86_64(指定编译哪个版本)</span><br><span class="line">all32（所有32位处理器版本，包含armv5 armv7a x86</span><br><span class="line">all （所有通用版本，包含armv5 armv7a arm64 x86 x86_64)</span><br><span class="line">clean （清除之前编译的缓存）</span><br><span class="line">check (检测支持的版本)</span><br></pre></td></tr></table></figure></blockquote><h3 id="编译-ffmpeg-说明"><a class="markdownIt-Anchor" href="#编译-ffmpeg-说明"></a> 编译 FFmpeg 说明</h3><p>编译 ffmpeg 时，根据自己的需求来确定你需要的是更多的 <code>codec/format</code>, 还是轻量级的 <code>codec/format</code> 就可以了。【官方文档有描述。后面将会专门讲配置特定需求的 codec/format】</p><ul><li>if you prefer more codec/format</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cd config</span><br><span class="line">rm module.sh</span><br><span class="line">ln -s module-default.sh module.sh</span><br><span class="line">cd android/contrib</span><br><span class="line"><span class="comment"># cd ios</span></span><br><span class="line">sh compile-ffmpeg.sh clean</span><br></pre></td></tr></table></figure><ul><li>if you prefer less codec/format for smaller binary size (include hevc function) 【hevc: HEVC是High Efficiency Video Coding的缩写，是一种新的视频压缩标准，用来以替代H.264/AVC编码标准，2013年1月26号，HEVC正式成为国际标准。】</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cd config</span><br><span class="line">rm module.sh</span><br><span class="line">ln -s module-lite-hevc.sh module.sh</span><br><span class="line">cd android/contrib</span><br><span class="line"><span class="comment"># cd ios</span></span><br><span class="line">sh compile-ffmpeg.sh clean</span><br></pre></td></tr></table></figure><ul><li>if you prefer less codec/format for smaller binnary size (by default)</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cd config</span><br><span class="line">rm module.sh</span><br><span class="line">ln -s module-lite.sh module.sh</span><br><span class="line">cd android/contrib</span><br><span class="line"><span class="comment"># cd ios</span></span><br><span class="line">sh compile-ffmpeg.sh clean</span><br></pre></td></tr></table></figure><h2 id="编译中遇到的问题"><a class="markdownIt-Anchor" href="#编译中遇到的问题"></a> 编译中遇到的问题</h2><h3 id="ndk-版本引起的问题强烈建议选择-r14b-版本上面有-ndk-下载链接"><a class="markdownIt-Anchor" href="#ndk-版本引起的问题强烈建议选择-r14b-版本上面有-ndk-下载链接"></a> NDK 版本引起的问题，<em><strong>强烈建议选择 <code>r14b</code> 版本，上面有 ndk 下载链接</strong></em></h3><ul><li>确认你的 NDK 版本是否大于等于 r10e</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">cat <span class="variable">$ANDROID_NDK</span>/source.properties</span><br><span class="line"></span><br><span class="line">Pkg<span class="selector-class">.Desc</span> = Android NDK</span><br><span class="line">Pkg<span class="selector-class">.Revision</span> = <span class="number">14.1</span>.<span class="number">3816874</span> <span class="comment">// 我的NDK版本</span></span><br></pre></td></tr></table></figure><ul><li>确定了你的 NDK 版本符合要求，还是报了如下错误</li></ul><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">You need <span class="keyword">the</span> NDKr10e <span class="keyword">or</span> later</span><br></pre></td></tr></table></figure><p>那么你就要需要修改如下代码, 把你的版本添加进版本检查中：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> android/contrib/tool</span><br><span class="line"></span><br><span class="line">vim <span class="keyword">do</span>-detect-env.sh</span><br><span class="line"></span><br><span class="line">IJK_NDK_REL=$(grep -o <span class="string">'^Pkg\.Revision.*=[0-9]*.*'</span> <span class="variable">$ANDROID_NDK</span>/source.properties 2&gt;/dev/null | sed <span class="string">'s/[[:space:]]*//g'</span> | cut -d <span class="string">"="</span> -f 2)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"IJK_NDK_REL=<span class="variable">$IJK_NDK_REL</span>"</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$IJK_NDK_REL</span>"</span> <span class="keyword">in</span></span><br><span class="line">    11*|12*|13*|14*|15*|20*)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">test</span> -d <span class="variable">$&#123;ANDROID_NDK&#125;</span>/toolchains/arm-linux-androideabi-4.9</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"NDKr<span class="variable">$IJK_NDK_REL</span> detected"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"You need the NDKr10e or later"</span></span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"You need the NDKr10e or later"</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">    ;;</span><br></pre></td></tr></table></figure><ul><li>由于 ndk 兼容问题导致 standalone toolchain， 如果 <code>macOS</code> 遇到这个问题，可以将使用 <code>r14b</code> 版本的 NDK； 参考<a href="https://github.com/Bilibili/ijkplayer/issues/3378" target="_blank" rel="noopener">链接</a></li></ul><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">====================</span><br><span class="line">[<span class="strong">*] check archs</span></span><br><span class="line"><span class="strong">====================</span></span><br><span class="line"><span class="strong">FF_ALL_ARCHS = armv5 armv7a arm64 x86 x86_64</span></span><br><span class="line"><span class="strong">FF_ACT_ARCHS = armv5 armv7a arm64 x86 x86_64</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">--------------------</span></span><br><span class="line"><span class="strong">[*</span>] make NDK standalone toolchain</span><br><span class="line">--------------------</span><br><span class="line">build on Darwin x86<span class="emphasis">_64</span></span><br><span class="line"><span class="emphasis">ANDROID_</span>NDK=/Users/davidxiaoshuo/Documents/dev<span class="emphasis">_tools/android/sdk/ndk-bundle</span></span><br><span class="line"><span class="emphasis">IJK_</span>NDK<span class="emphasis">_REL=20.0.5594570</span></span><br><span class="line"><span class="emphasis">NDKr20.0.5594570 detected</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">[*] make NDK standalone toolchain</span></span><br><span class="line"><span class="emphasis">--------------------</span></span><br><span class="line"><span class="emphasis">build on Darwin x86_</span>64</span><br><span class="line">ANDROID<span class="emphasis">_NDK=/Users/davidxiaoshuo/Documents/dev_</span>tools/android/sdk/ndk-bundle</span><br><span class="line">IJK<span class="emphasis">_NDK_</span>REL=20.0.5594570</span><br><span class="line">NDKr20.0.5594570 detected</span><br><span class="line">HOST<span class="emphasis">_OS=darwin</span></span><br><span class="line"><span class="emphasis">HOST_</span>EXE=</span><br><span class="line">HOST<span class="emphasis">_ARCH=x86_</span>64</span><br><span class="line">HOST<span class="emphasis">_TAG=darwin-x86_</span>64</span><br><span class="line">HOST<span class="emphasis">_NUM_</span>CPUS=12</span><br><span class="line">BUILD<span class="emphasis">_NUM_</span>CPUS=24</span><br><span class="line">Auto-config: --arch=arm</span><br><span class="line">ERROR: Failed to create toolchain.</span><br></pre></td></tr></table></figure><h3 id="其他方面导致的问题"><a class="markdownIt-Anchor" href="#其他方面导致的问题"></a> 其他方面导致的问题</h3><ul><li>编译模型脚本 （<a href="http://module.sh" target="_blank" rel="noopener">module.sh</a>）导致的问题</li></ul><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attribute">WARNING</span>: arm-linux-androideabi-pkg-config not found, library detection may fail.</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line">[*] compile ffmpeg</span><br><span class="line">--------------------</span><br><span class="line">In file included from ./libavutil/internal.h:42:0,</span><br><span class="line">                 from ./libavutil/common.h:467,</span><br><span class="line">                 from ./libavutil/avutil.h:296,</span><br><span class="line">                 from ./libavutil/opt.h:31,</span><br><span class="line">                 from libavfilter/af_adelay.c:22:</span><br><span class="line">./libavutil/timer.h:38:31: fatal error: linux/perf_event.h: No such file or directory</span><br><span class="line"> # include &lt;linux/perf_event.h&gt;</span><br><span class="line">                               ^</span><br><span class="line">compilation terminated.</span><br><span class="line">In file included from ./libavutil/internal.h:42:0,</span><br><span class="line">                 from ./libavutil/common.h:467,</span><br><span class="line">                 from ./libavutil/avutil.h:296,</span><br><span class="line">                 from libavfilter/avfilter.h:41,</span><br><span class="line">                 from libavfilter/audio.h:25,</span><br><span class="line">                 from libavfilter/af_acopy.c:19:</span><br><span class="line">./libavutil/timer.h:38:31: fatal error: linux/perf_event.h: No such file or directory</span><br><span class="line"> # include &lt;linux/perf_event.h&gt;</span><br></pre></td></tr></table></figure><p>可以在 <code>module.sh</code> 最后添加 <code>export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --disable-linux-perf&quot;</code> 这行代码。 参考<a href="https://github.com/Bilibili/ijkplayer/issues/4043" target="_blank" rel="noopener">链接</a></p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
            <tag> audio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Jni 一</title>
      <link href="/android/android_jni_one/"/>
      <url>/android/android_jni_one/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><h2 id="通过-android-studio-创建一个-native-c-的工程"><a class="markdownIt-Anchor" href="#通过-android-studio-创建一个-native-c-的工程"></a> 通过 Android Studio 创建一个 <code>Native C++</code> 的工程</h2><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/android_studio_native_cplus_screenshot.png" alt></p><blockquote><p><strong>本文中选用 C++11 进行开发</strong></p></blockquote><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio Gradle&#39;s Logger</title>
      <link href="/android/android_gradle_logger/"/>
      <url>/android/android_gradle_logger/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><p><strong>前言:</strong> 我们在通过 Android Studio 进行 android 开发的时候，难免需要在进行 Gradle 编译构建的时候需要输出一些信息来辅助我们进行配置调试，或是需要输出一些必要信息来提醒其他开发者，此时，我们就要了解下 gradle 的 log 打印相关辅助工具类了。</p><blockquote><p><strong>补充：Gradle -&gt; 构建系统工具，它的 DSL 基于 Groovy 实现</strong></p></blockquote><h3 id="日志级别"><a class="markdownIt-Anchor" href="#日志级别"></a> 日志级别</h3><table><thead><tr><th style="text-align:center">级别</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">ERROR</td><td style="text-align:center">错误信息</td></tr><tr><td style="text-align:center">QUIET</td><td style="text-align:center">重要信息</td></tr><tr><td style="text-align:center">WARNING</td><td style="text-align:center">警告信息</td></tr><tr><td style="text-align:center">LIFECYCLE</td><td style="text-align:center">进度信息</td></tr><tr><td style="text-align:center">INFO</td><td style="text-align:center">内容信息</td></tr><tr><td style="text-align:center">DEBUG</td><td style="text-align:center">调试信息</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.gradle.api.logging;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The log levels supported by Gradle.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> LogLevel &#123;</span><br><span class="line">    DEBUG,</span><br><span class="line">    INFO,</span><br><span class="line">    LIFECYCLE,</span><br><span class="line">    WARN,</span><br><span class="line">    QUIET,</span><br><span class="line">    ERROR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="日志开关选项"><a class="markdownIt-Anchor" href="#日志开关选项"></a> 日志开关选项</h3><table><thead><tr><th style="text-align:center">开关选项</th><th style="text-align:center">输出的日志级别</th></tr></thead><tbody><tr><td style="text-align:center">无选项</td><td style="text-align:center">LIFECYCLE及更高级别</td></tr><tr><td style="text-align:center">-q 或 --quiet</td><td style="text-align:center">QUIRT及更高级别</td></tr><tr><td style="text-align:center">-i 或 --info</td><td style="text-align:center">INFO及更高级别</td></tr><tr><td style="text-align:center">-d 或 --debug</td><td style="text-align:center">DEBUG及更高级别(全部日志)</td></tr></tbody></table><figure class="highlight console"><table><tr><td class="code"><pre><span class="line">// 输出 INFO及更高级别的日志</span><br><span class="line">gradle -i task</span><br></pre></td></tr></table></figure><p><em><strong>提醒： Android Studio 默认情况开启的是<code>LIFECYCLE及更高级别</code>, 所以此时在通过 Android Studio 进行默认 Build 操作时，此时在 Build Output 控制台打印出来的是这个级别的，Info，Debug Log 并不会输出</strong></em></p><h3 id="在-gradle-中尝试打印log"><a class="markdownIt-Anchor" href="#在-gradle-中尝试打印log"></a> 在 gradle 中尝试打印Log</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">logger.error(<span class="string">'this is log of gradle, level ---&gt; error'</span>)</span><br><span class="line">logger.quiet(<span class="string">'this is log of gradle, level ---&gt; quiet'</span>)</span><br><span class="line">logger.warn(<span class="string">'this is log of gradle, level ---&gt; warn'</span>)</span><br><span class="line">logger.lifecycle(<span class="string">'this is log of gradle, level ---&gt; lifecycle'</span>)</span><br><span class="line">logger.info(<span class="string">'this is log of gradle, level ---&gt; info'</span>)</span><br><span class="line">logger.debug(<span class="string">'this is log of gradle, level ---&gt; debug'</span>)</span><br></pre></td></tr></table></figure><p>在验证时，通过 <code>-d</code> 得到以下输出，验证 Log 级别</p><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [ERROR] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; error</span><br><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [QUIET] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; quiet</span><br><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [WARN] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; warn</span><br><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [LIFECYCLE] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; lifecycle</span><br><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [INFO] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; info</span><br><span class="line"><span class="number">10</span>:<span class="number">01</span>:<span class="number">42</span><span class="variable">.029</span> [DEBUG] [org<span class="variable">.gradle</span><span class="variable">.api</span><span class="variable">.Project</span>] <span class="keyword">this</span> is log of gradle, level ---&gt; debug</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>printf</code> 在 gradle 中也是可以再 Build Output 控制台中输出 Log 的</strong></p></blockquote><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">07</span>:<span class="number">24</span><span class="variable">.545</span> [QUIET] [system<span class="variable">.out</span>] <span class="keyword">this</span> is log of gradle, <span class="keyword">event</span> ---&gt; printf</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android JNI 层 Log 输出</title>
      <link href="/android/jni_logger/"/>
      <url>/android/jni_logger/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><h3 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述：</h3><p>android 中在进行一些 C++ 底层库开发的时候难免需要一些 log 来辅助我们的开发调试，或是打印一些重要信息给到 Lib 库的使用者。在 android 中，通过 C++ 层的 <code>print</code> Or <code>std::cout</code> 是无法在logcat 中正常显示 log 信息的。android NDK 专门提供了相关的 <a href="https://developer.android.com/ndk/reference/group/logging" target="_blank" rel="noopener">Logging</a> 工具。</p><h3 id="__android_log_print-主要使用的函数"><a class="markdownIt-Anchor" href="#__android_log_print-主要使用的函数"></a> __android_log_print 主要使用的函数</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> __android_log_print(</span><br><span class="line">  <span class="keyword">int</span> prio,<span class="comment">//优先级</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *tag,<span class="comment">//标签</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt,  <span class="comment">// format log string</span></span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="cmake-编译-在-cmakeliststxt-中配置需要依赖的-log-系统库"><a class="markdownIt-Anchor" href="#cmake-编译-在-cmakeliststxt-中配置需要依赖的-log-系统库"></a> cmake 编译， 在 <code>CMakeLists.txt</code> 中配置需要依赖的 Log 系统库</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查找要依赖的系统库</span></span><br><span class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">              log-<span class="class"><span class="keyword">lib</span></span></span><br><span class="line"></span><br><span class="line">              <span class="comment"># Specifies the name of the NDK library that</span></span><br><span class="line">              <span class="comment"># you want CMake to locate.</span></span><br><span class="line">              log )</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定要生成的动态库所依赖的库（系统库，外部第三方库）</span></span><br><span class="line">target_link_libraries( <span class="comment"># Specifies the target library.</span></span><br><span class="line">                       <span class="comment"># Links the target library to the log library</span></span><br><span class="line">                       <span class="comment"># included in the NDK.</span></span><br><span class="line">                       </span><br><span class="line">                       $&#123;log-<span class="class"><span class="keyword">lib</span>&#125; )</span></span><br></pre></td></tr></table></figure><h3 id="通过对-__android_log_print-稍加修改来使-log-输出变得更加简单"><a class="markdownIt-Anchor" href="#通过对-__android_log_print-稍加修改来使-log-输出变得更加简单"></a> 通过对 __android_log_print 稍加修改，来使 log 输出变得更加简单</h3><blockquote><p><strong>首先要引入所需的头文件</strong> <code>#include &lt;android/log.h&gt;</code></p></blockquote><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">#include &lt;android/<span class="keyword">log</span>.h&gt;</span><br><span class="line"></span><br><span class="line">#define <span class="built_in">TAG</span> <span class="string">"ProjectName"</span> <span class="comment">// 这个是自定义的LOG的标识   </span></span><br><span class="line"></span><br><span class="line">#define LOGD(<span class="params">...</span>) __android_log_print(ANDROID_LOG_DEBUG,<span class="built_in">TAG</span> ,__VA_ARGS__) <span class="comment">// 定义LOGD类型，在 Release 模式下禁用   </span></span><br><span class="line"></span><br><span class="line">#define LOGI(<span class="params">...</span>) __android_log_print(ANDROID_LOG_INFO,<span class="built_in">TAG</span> ,__VA_ARGS__) <span class="comment">// 定义LOGI类型   </span></span><br><span class="line"></span><br><span class="line">#define LOGW(<span class="params">...</span>) __android_log_print(ANDROID_LOG_WARN,<span class="built_in">TAG</span> ,__VA_ARGS__) <span class="comment">// 定义LOGW类型   </span></span><br><span class="line"></span><br><span class="line">#define LOGE(<span class="params">...</span>) __android_log_print(ANDROID_LOG_ERROR,<span class="built_in">TAG</span> ,__VA_ARGS__) <span class="comment">// 定义LOGE类型   </span></span><br><span class="line"></span><br><span class="line">#define LOGF(<span class="params">...</span>) __android_log_print(ANDROID_LOG_FATAL,<span class="built_in">TAG</span> ,__VA_ARGS__) <span class="comment">// 定义LOGF类型</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="built_in">char</span>* log_example_str = <span class="string">"hello logger"</span>;</span><br><span class="line"><span class="constructor">LOGD(<span class="string">"This is a log, the content is %s"</span>, <span class="params">log_example_str</span>)</span>;</span><br><span class="line"><span class="constructor">LOGI(<span class="string">"This is a log, the content is %s"</span>, <span class="params">log_example_str</span>)</span>;</span><br><span class="line"><span class="constructor">LOGW(<span class="string">"This is a log, the content is %s"</span>, <span class="params">log_example_str</span>)</span>;</span><br><span class="line"><span class="constructor">LOGE(<span class="string">"This is a log, the content is %s"</span>, <span class="params">log_example_str</span>)</span>;</span><br><span class="line"><span class="constructor">LOGF(<span class="string">"This is a log, the content is %s"</span>, <span class="params">log_example_str</span>)</span>;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>menu</title>
      <link href="/menu/"/>
      <url>/menu/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><ul><li>Tech<ul><li>android<ul><li><a href="/android/cmake_list">android studio cmake 编译常规设置</a></li><li><a href="/android/jni_logger">Android Jni 层 Log 输出</a></li></ul></li><li>c++<ul><li><a href="/c++/cplus_type_convert">C++ 中 基础类型转换成 char*</a></li><li><a href="/c++/macos_remote_disk_mount">macos 远程硬盘挂载</a></li><li><a href="/c++/minicom_setup">USB 转串口工具 minicom Setup</a></li></ul></li><li>git<ul><li><a href="/git/git_multi_account_manager">Git 多github（gitlab）账号管理</a></li></ul></li><li>others<ul><li><a href="/others/hello_world">Hexo Page 简单发布流程</a></li><li><a href="/others/macos_terminal_themes">MacOS Terminal 美化 【程序猿推荐】</a></li></ul></li></ul></li><li>Life</li></ul><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>USB 转串口工具 minicom Setup</title>
      <link href="/c++/minicom_setup/"/>
      <url>/c++/minicom_setup/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><h3 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h3><ol><li>安装 minicom 串口调试工具, 通过 Homebrew 安装即可</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install minicom</span><br></pre></td></tr></table></figure><h3 id="setup"><a class="markdownIt-Anchor" href="#setup"></a> Setup</h3><ol><li>将串口线连接到电脑USB上，查看当前命令行查看连接的串口号</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /dev/tty*</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/serial_port_num.jpg" alt></p><blockquote><p><em><strong>上图中的 <code>/dev/tty.usbserial-14340</code> 就是 USB 的串口号</strong></em></p></blockquote><ol start="2"><li>将串口号配置给串口工具 <code>minicom</code></li></ol><ul><li>命令打开串口工具</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">minicom -s</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/minicom_board.jpg" alt></p><ul><li>通过键盘上的 <code>J</code>, <code>K</code> 或者方向键上下移动到 <code>Serial port setup</code> 选项，按回车选中，进入串口设置界面</li></ul><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/minicom_setup.jpg" alt></p><ul><li>通过键盘上的大写字母 <code>A</code> 选中进入 <code>Serial Device</code> 选项，并将之前复制好的串口号粘贴在此，并按***两次***回车, 回到主 Setup 界面。</li><li>定位到 <code>Save setup as dfl</code> 回车并选中。</li><li>定位到 <code>Exit</code> 退出 Setup 界面到 串口命令终端中 或 定位到 <code>Exit from minicom</code> 退回到系统命令界面</li></ul><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macos 远程硬盘挂载</title>
      <link href="/c++/macos_remote_disk_mount/"/>
      <url>/c++/macos_remote_disk_mount/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><h3 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h3><ol><li>安装Homebrew, 具体安装方式，见<a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">官网</a></li><li>通过Homebrew 安装 sshfs 的依赖 <code>fuse</code></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install Caskroom/cask/osxfuse</span><br></pre></td></tr></table></figure><ol start="3"><li>通过Homebrew 安装sshfs</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install sshfs</span><br></pre></td></tr></table></figure><h3 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sshfs remote_account@ip:remote_directory /<span class="built_in">local</span>/directory</span><br></pre></td></tr></table></figure><blockquote><p><strong>挂载到本地时，避免挂在到根目录下或者当前账户的主目录下，否则会引起以下错误：</strong></p></blockquote><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">mount_osxfuse: mount point /Users/xxxx/ImageFolder <span class="keyword">is</span> itself <span class="keyword">on</span> <span class="keyword">a</span> OSXFUSE volume</span><br><span class="line">fuse: failed <span class="keyword">to</span> mount <span class="keyword">file</span> <span class="built_in">system</span>: Invalid <span class="keyword">argument</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Home Page</title>
      <link href="/home/"/>
      <url>/home/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><h2 id="home-page"><a class="markdownIt-Anchor" href="#home-page"></a> Home Page</h2><p>Hi, 这里是我记录我所感兴趣的技术，生活的地方。如果技术上有错误的地方欢迎联系我，并指正。</p><ul><li>昵称：David小硕</li><li>职业：移动端技术研发经理</li><li>主攻技术方向：Android; iOS; C++</li><li>公司：北京物灵科技有限公司</li></ul><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 中 基础类型转换成 char *</title>
      <link href="/c++/cplus_type_convert/"/>
      <url>/c++/cplus_type_convert/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><h1 id="c-中-基础类型转换成-char"><a class="markdownIt-Anchor" href="#c-中-基础类型转换成-char"></a> C++ 中 基础类型转换成 char*</h1><p>有时候我们在项目中难免会用到，将基础数据类型转换成char*，这样会方面一些业务上的开展。前一阵子做基于mips 平台下 阿里云Log Service时候就用到了，由于考虑要封装sdk的轻量性，所以没有考虑依赖其他的系统库。</p><h3 id="以下demo-代码依赖如下系统库"><a class="markdownIt-Anchor" href="#以下demo-代码依赖如下系统库"></a> 以下demo 代码依赖如下系统库，</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="基础数据类型的相互转换其实有多种方式-以下多是通过-printf-方式来完成的"><a class="markdownIt-Anchor" href="#基础数据类型的相互转换其实有多种方式-以下多是通过-printf-方式来完成的"></a> 基础数据类型的相互转换其实有多种方式。以下多是通过 <code>printf</code> 方式来完成的。</h3><h3 id="int-转-char"><a class="markdownIt-Anchor" href="#int-转-char"></a> int 转 char *</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">int_to_char_ptr</span><span class="params">(<span class="keyword">int</span> src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> result[<span class="number">30</span>] = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">"%d"</span>, src);</span><br><span class="line">    <span class="keyword">char</span>* ret_value = result;</span><br><span class="line">    <span class="keyword">return</span> ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="double-转-char"><a class="markdownIt-Anchor" href="#double-转-char"></a> double 转 char*</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">double_to_char_ptr</span><span class="params">(<span class="keyword">double</span> src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> result[<span class="number">30</span>] = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 如果需要保留小数x位数, eg: %.xlf</span></span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">"%lf"</span>, src);</span><br><span class="line">    <span class="keyword">char</span>* ret_value = result;</span><br><span class="line">    <span class="keyword">return</span> ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="float-转-char"><a class="markdownIt-Anchor" href="#float-转-char"></a> float 转 char*</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">float_to_char_ptr</span><span class="params">(<span class="keyword">float</span> src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> result[<span class="number">30</span>] = <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 如果需要保留小数x位数, eg: %.xf</span></span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">"%f"</span>, src);</span><br><span class="line">    <span class="keyword">char</span>* ret_value = result;</span><br><span class="line">    <span class="keyword">return</span> ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="size_t-转-char"><a class="markdownIt-Anchor" href="#size_t-转-char"></a> size_t 转 char*</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">size_t_to_char_ptr</span><span class="params">(<span class="keyword">size_t</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> result[<span class="number">30</span>] = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(result, <span class="string">"%zu"</span>, value);</span><br><span class="line">    <span class="keyword">char</span> * ret_value = result;</span><br><span class="line">    <span class="keyword">return</span> ret_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string-转-char"><a class="markdownIt-Anchor" href="#string-转-char"></a> string 转 char*</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">str_to_char_array</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(value.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="char-转-string"><a class="markdownIt-Anchor" href="#char-转-string"></a> char* 转 string</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">char_ptr_to_str</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* value)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> res;</span><br><span class="line">    res = value;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS Terminal 美化 【程序猿推荐】</title>
      <link href="/others/macos_terminal_themes/"/>
      <url>/others/macos_terminal_themes/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><h1 id="macos-terminal-美化-程序猿推荐"><a class="markdownIt-Anchor" href="#macos-terminal-美化-程序猿推荐"></a> MacOS Terminal 美化 【程序猿推荐】</h1><p><img src="https://travis-ci.org/joemccann/dillinger.svg?branch=master" alt></p><blockquote><p>工欲善其事，必先利其器</p></blockquote><p>我们在MacOS 下开发的时候不可避免一定为会用的terminal，不管你是server端选手，客户端选手，又或者是…哎呀，等等吧，总之terminal是我们在开发中使用评率比较高的基础开发工具了。但是原生的terminal，是一个及其简陋的家伙。那么怎么能让我们的terminal能够看起来既舒服又能超好用呢。动起手来…</p><h2 id="先晒一张我的terminal截图"><a class="markdownIt-Anchor" href="#先晒一张我的terminal截图"></a> 先晒一张我的terminal截图：</h2><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/terminal_screenshot.png" alt></p><h2 id="改造terminal步骤"><a class="markdownIt-Anchor" href="#改造terminal步骤"></a> 改造Terminal步骤</h2><ul><li><p><a href="https://ohmyz.sh" target="_blank" rel="noopener">安装oh-my-zsh</a></p></li><li><p>设置 oh-my-zsh <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">主题</a></p></li><li><p>安装 oh-my-zsh 日常所需的插件，以提高工作效率</p></li><li><p>修改 Terminal 的Profile，让我们的 Terminal 与 zsh 的主题更加匹配</p></li></ul><h2 id="准备工作可能会需要"><a class="markdownIt-Anchor" href="#准备工作可能会需要"></a> 准备工作(可能会需要)</h2><p>首先我们先安装MacOS 中比较好用的软件包管理器 <a href="https://brew.sh" target="_blank" rel="noopener">Homebrew</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><h2 id="安装-oh-my-zsh"><a class="markdownIt-Anchor" href="#安装-oh-my-zsh"></a> 安装 oh-my-zsh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><h2 id="配置-oh-my-zsh-主题"><a class="markdownIt-Anchor" href="#配置-oh-my-zsh-主题"></a> 配置 oh-my-zsh 主题</h2><p>首先我们链接到 oh-my-zsh 主题的页面 --&gt; <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/wiki/Themes</a><br>选择我们喜欢的主题，然后记住主题名字，这里我的主题名字是：<strong><u>pygmalion</u></strong></p><p>然后我们打开Terminal窗口输入以下命令对 .zshrc 文件进行编辑</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">// 将 ZSH_THEME 设置为即将要是用的主题名称</span><br><span class="line">ZSH_THEME=<span class="string">"pygmalion"</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/blog_source/master/resources/images/zshrc_screenshot.png" alt="如图"></p><p>设置成功后，退出vim。执行以下命令，使刚刚的设置生效：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>如果你细心你会发现实际上oh-my-zsh在安装的时候已经内置了很多的主题。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/themes // 主题目录</span><br><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/plugins // 插件所在目录</span><br></pre></td></tr></table></figure><h2 id="安装oh-my-zsh插件"><a class="markdownIt-Anchor" href="#安装oh-my-zsh插件"></a> 安装oh-my-zsh插件</h2><p>oh-my-zsh 的插件有很多，它本身内置的插件也有很多，但是我们在用的时候可以根据需要设置需要的即可。<em><strong>因为插件安装过多，一定程度上会使zsh的命令执行效率变低</strong></em></p><h2 id="zsh-syntax-highlighting"><a class="markdownIt-Anchor" href="#zsh-syntax-highlighting"></a> zsh-syntax-highlighting</h2><p>zsh 语法高亮插件，<a href="https://github.com/zsh-users/zsh-syntax-highlighting" target="_blank" rel="noopener">官方地址</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br><span class="line"></span><br><span class="line">//添加如下脚本</span><br><span class="line">plugins=(</span><br><span class="line">    git</span><br><span class="line">    zsh-syntax-highlighting</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>安装效果如下：</p><p><img src="https://raw.githubusercontent.com/zsh-users/zsh-syntax-highlighting/master/images/after2.png" alt></p><h2 id="修改-terminal-的profile导入我们想要的主题-我选择的是fideloper"><a class="markdownIt-Anchor" href="#修改-terminal-的profile导入我们想要的主题-我选择的是fideloper"></a> 修改 Terminal 的Profile，导入我们想要的主题 【我选择的是***Fideloper***】</h2><p><a href="https://github.com/lysyi3m/macos-terminal-themes" target="_blank" rel="noopener">macos-terminal-themes</a> 提供了丰富的主题供我们选择，我们可以在当中找一款与我们所选zsh主题相符合的主题。</p><ul><li>将 macos-terminal-themes 下载到本地</li><li>进入到 schemes 目录下</li><li>双击 *.terminal 的文件，将会打开一个所选主题的新的Terminal窗口</li><li>选择Terminal 工具栏中的 Shell -&gt; Use Setting as Default, 即将主题修改为所选主题。</li></ul><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android studio cmake 编译常规设置</title>
      <link href="/android/cmake_list/"/>
      <url>/android/cmake_list/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><h3 id="add_executable-指令"><a class="markdownIt-Anchor" href="#add_executable-指令"></a> add_executable 指令</h3><p>语法：<code>add_executable(executable_file_name [source])</code>将一组源文件 source 生成一个可执行文件。 source 可以是多个源文件，也可以是对应定义的变量 如：<code>add_executable(hello main.c)</code></p><h3 id="cmake_minimun_requiredversion-341"><a class="markdownIt-Anchor" href="#cmake_minimun_requiredversion-341"></a> cmake_minimun_required(VERSION 3.4.1)</h3><p>用来指定 CMake 最低版本为3.4.1，如果没指定，执行 cmake 命令时可能会出错</p><h3 id="add_subdirectory-指令"><a class="markdownIt-Anchor" href="#add_subdirectory-指令"></a> add_subdirectory 指令</h3><p>语法：<code>add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</code></p><p>这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置。<code>EXCLUDE_FROM_ALL</code>参数含义是将这个目录从编译过程中排除。</p><p>另外，也可以通过 SET 指令重新定义<code>EXECUTABLE_OUTPUT_PATH</code> 和 <code>LIBRARY_OUTPUT_PATH</code> 变量来指定最终的目标二进制的位置 (指最终生成的 hello 或者最终的共享库，不包含编译生成的中间文件)</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/bin)</span><br><span class="line"></span><br><span class="line">set(LIBRARY_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/<span class="class"><span class="keyword">lib</span>)</span></span><br></pre></td></tr></table></figure><h3 id="add_library-指令"><a class="markdownIt-Anchor" href="#add_library-指令"></a> add_library 指令</h3><p>语法：<code>add_library(libname [SHARED | STATIC | MODULE] [EXCLUDE_FROM_ALL] [source])</code></p><p>将一组源文件 source 编译出一个库文件，并保存为 <a href="http://libname.so" target="_blank" rel="noopener">libname.so</a> (lib 前缀是生成文件时 CMake自动添加上去的)。其中有三种库文件类型，<strong>不写的话，默认为 STATIC</strong>:</p><ul><li>SHARED: 表示动态库，可以在(Java)代码中使用<code>System.loadLibrary(name)</code>动态调用；</li><li>STATIC: 表示静态库，集成到代码中会在编译时调用；</li><li>MODULE: 只有在使用 dyId 的系统有效，如果不支持 dyId，则被当作 SHARED 对待；</li><li>EXCLUDE_FROM_ALL: 表示这个库不被默认构建，除非其他组件依赖或手工构建</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">#将compress<span class="selector-class">.c</span> 编译成 libcompress<span class="selector-class">.so</span> 的共享库</span><br><span class="line"><span class="function"><span class="title">add_library</span><span class="params">(compress SHARED compress.c)</span></span></span><br></pre></td></tr></table></figure><ul><li>add_library 命令也可以用来导入第三方的库:<code>add_library(libname [SHARED | STATIC | MODULE | UNKNOWN] IMPORTED)</code> 如，导入 <a href="http://libjpeg.so" target="_blank" rel="noopener">libjpeg.so</a></li></ul><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line"><span class="keyword">add_library</span>(libjpeg SHARED IMPORTED)</span><br></pre></td></tr></table></figure><p>导入库后，当需要使用 target_link_libraries 链接库时，可以直接使用该库</p><h3 id="find_library-指令"><a class="markdownIt-Anchor" href="#find_library-指令"></a> find_library 指令</h3><p>语法：<code>find_library(name1 path1 path2 …)</code>VAR 变量表示找到的库全路径，包含库文件名 。例如：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">find_library(libX  X11 /usr/<span class="class"><span class="keyword">lib</span>)</span></span><br><span class="line"></span><br><span class="line">find_library(log-<span class="class"><span class="keyword">lib</span> <span class="title">log</span>)</span></span><br><span class="line"><span class="comment">#路径为空，应该是查找系统环境变量路径</span></span><br></pre></td></tr></table></figure><h3 id="set_target_properties-指令"><a class="markdownIt-Anchor" href="#set_target_properties-指令"></a> set_target_properties 指令</h3><p>语法:<code>set_target_properties(target1 target2 … PROPERTIES prop1 value1 prop2 value2 …)</code>这条指令可以用来设置输出的名称（设置构建同名的动态库和静态库，或者指定要导入的库文件的路径），对于动态库，还可以用来指定动态库版本和 API 版本。如: <code>set_target_properties(hello_static PROPERTIES OUTPUT_NAME “hello”)</code> 设置同名的 hello 动态库和静态库：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">set_target_properties</span><span class="params">(hello PROPERTIES CLEAN_DIRECT_OUTPUT <span class="number">1</span>)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">set_target_properties</span><span class="params">(hello_static PROPERTIES CLEAN_DIRECT_OUTPUT <span class="number">1</span>)</span></span></span><br></pre></td></tr></table></figure><p>指定要导入的库文件的路径</p><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">add<span class="constructor">_library(<span class="params">jpeg</span> SHARED IMPORTED)</span></span><br><span class="line">#注意要先 add_library，再 set_target_properties</span><br><span class="line"></span><br><span class="line">set<span class="constructor">_target_properties(<span class="params">jpeg</span> PROPERTIES IMPORTED_LOCATION $&#123;PROJECT_SOURCE_DIR&#125;<span class="operator">/</span><span class="params">libs</span><span class="operator">/</span>$&#123;ANDROID_ABI&#125;<span class="operator">/</span><span class="params">libjpeg</span>.<span class="params">so</span>)</span></span><br></pre></td></tr></table></figure><p>设置动态库 hello 版本和 API 版本：<code>set_target_properties(hello PROPERTIES VERSION 1.2 SOVERSION 1)</code>和它对应的指令：<code>get\_target_property(VAR target property)</code>。如上面的例子，获取输出的库的名字</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">get_target_property</span><span class="params">(OUTPUT_VALUE hello_static OUTPUT_NAME)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">message</span><span class="params">(STATUS <span class="string">"this is the hello_static OUTPUT_NAME:"</span>$&#123;OUTPUT_VALUE&#125;)</span></span></span><br></pre></td></tr></table></figure><h3 id="include_directories-指令"><a class="markdownIt-Anchor" href="#include_directories-指令"></a> include_directories 指令</h3><p>语法：<code>include_directories([AFTER | BEFORE] [SYSTEM] dir1 dir2…)</code></p><p>这个指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割，如果路径中包含了空格，可以使用双引号将它括起来，默认的行为是追加到当前的头文件搜索路径的后面。</p><h3 id="target_link_libraries-指令"><a class="markdownIt-Anchor" href="#target_link_libraries-指令"></a> target_link_libraries 指令</h3><p>语法：<code>target_link_libraries(target library library2…)</code></p><p>这个指令可以用来为 target 添加需要的链接的共享库，同样也可以用于为自己编写的共享库添加共享库链接。如：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment">#指定 compress 工程需要用到 libjpeg 库和 log 库</span></span><br><span class="line">target_link_libraries(compress libjpeg $&#123;log-<span class="class"><span class="keyword">lib</span>&#125;)</span></span><br></pre></td></tr></table></figure><p>同样，link_directories(directory1 directory2 …) 可以添加非标准的共享库搜索路径。还有其他 file、list、install 、find_ 指令和控制指令等就不介绍了，详细可以查看手册。</p><h3 id="cmake-的常用变量"><a class="markdownIt-Anchor" href="#cmake-的常用变量"></a> CMake 的常用变量</h3><ul><li>变量引用方式</li></ul><p>使用 ${} 进行变量的引用。不过在 IF 等语句中，可以直接使用变量名而不用通过 ${} 取值</p><ul><li><p>自定义变量的方式</p><p>主要有隐式定义和显式定义两种。隐式定义，如 PROJECT 指令会隐式定义<code>_BINARY_DIR</code> 和<code>_SOURCE_DIR</code>而对于显式定义就是通过 SET 指令来定义。如：set(HELLO_SRC main.c)</p></li><li><p>CMake 常用变量</p><ul><li><code>CMAKE_BINARY_DIR, PROJECT_BINARY_DIR, _BINARY_DIR</code>这三个变量指代的内容都是一样的，如果是 in-source 编译，指的是工程顶层目录，如果是 out-of-source 编译，指的是工程编译发生的目录。</li><li><code>CMAKE_SOURCE_DIR, PROJECT_SOURCE_DIR, _SOURCE_DIR</code>这三个变量指代的内容也是一样的，不论哪种编译方式，都是工程顶层目录。</li><li><code>CMAKE_CURRENT_SOURCE_DIR</code>当前处理的 CMakeLists.txt 所在的路径</li><li><code>CMAKE_CURRENT_BINARY_DIR</code>如果是 in-source 编译，它跟 CMAKE_CURRENT_SOURCE_DIR 一致，如果是 <code>out-of-source</code> 编译，指的是 target 编译目录。使用 ADD_SUBDIRECTORY(src bin)可以修改这个变量的值；而使用 <code>SET(EXECUTABLE_OUTPUT_PATH &amp;lt; 新路径&amp;gt;)</code> 并不会对这个变量造成影响，它仅仅修改了最终目标文件存放的路径。</li><li><code>CMAKE_CURRENT_LIST_FILE</code> 输出调用这个变量的 CMakeLists.txt 的完整路径</li><li><code>CMAKE_CURRENT_LIST_LINE</code> 输出这个变量所在的行</li><li><code>CMAKE_MODULE_PATH</code> 这个变量用来定义自己的 CMake 模块所在的路径。如果你的工程比较复杂，有可能会自己编写一些 cmake 模块，这些 cmake 模块是随你的工程发布的，为了让 cmake 在处理 CMakeLists.txt 时找到这些模块，你需要通过 SET 指令，将自己的 cmake 模块路径设置一下。比如：<code>SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)</code> 这时候你就可以通过 INCLUDE 指令来调用自己的模块了。</li><li><code>EXECUTABLE_OUTPUT_PATH</code> 和 <code>LIBRARY_OUTPUT_PATH</code>分别用来重新定义最终结果的存放目录，前面我们已经提到了这两个变量。</li><li><code>PROJECT_NAME</code>返回通过 PROJECT 指令定义的项目名称。</li></ul></li></ul><h3 id="android-cmake-的使用"><a class="markdownIt-Anchor" href="#android-cmake-的使用"></a> Android CMake 的使用</h3><h4 id="cmakelisttxt-的编写"><a class="markdownIt-Anchor" href="#cmakelisttxt-的编写"></a> CMakeList.txt 的编写</h4><p>再回归到 Android NDK 开发中 CMake 的使用，先看一个系统生成的 NDK 项目的 CMakeLists.txt 的配置：(去掉原有的注释)</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置编译 native library 需要最小的 cmake 版本</span></span><br><span class="line">cmake_minimum_required(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 将指定的源文件编译为名为 libnative-lib.so 的动态库</span></span><br><span class="line">add_library</span><br><span class="line">(native-<span class="class"><span class="keyword">lib</span> <span class="title">SHARED</span> <span class="title">src</span>/<span class="title">main</span>/<span class="title">cpp</span>/<span class="title">native</span>-<span class="title">lib</span>.<span class="title">cpp</span>)</span></span><br><span class="line"><span class="comment"># 查找本地 log 库</span></span><br><span class="line">find_library</span><br><span class="line">(log-<span class="class"><span class="keyword">lib</span> <span class="title">log</span>)</span></span><br><span class="line"><span class="comment"># 将预构建的库添加到自己的原生库</span></span><br><span class="line">target_link_libraries</span><br><span class="line">(native-<span class="class"><span class="keyword">lib</span> $&#123;<span class="title">log</span>-<span class="title">lib</span>&#125;)</span></span><br></pre></td></tr></table></figure><p>复杂一点的 CMakeLists，这是一个本地使用 <a href="http://libjpeg.so" target="_blank" rel="noopener">libjpeg.so</a> 来做图片压缩的项目</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"><span class="comment">#设置生成的so动态库最后输出的路径</span></span><br><span class="line">set(CMAKE_LIBRARY_OUTPUT_DIRECTORY $&#123;PROJECT_SOURCE_DIR&#125;/src/main/jniLibs/$&#123;ANDROID_ABI&#125;)</span><br><span class="line"><span class="comment">#指定要引用的libjpeg.so的头文件目录</span></span><br><span class="line">set(LIBJPEG_INCLUDE_DIR src/main/cpp/<span class="keyword">include</span>)</span><br><span class="line">include_directories($&#123;LIBJPEG_INCLUDE_DIR&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入libjpeg动态库 SHARED；静态库为STATIC</span></span><br><span class="line">add_library(jpeg SHARED IMPORTED)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对应so目录，注意要先 add_library，再 set_target_properties）</span></span><br><span class="line">set_target_properties(jpeg PROPERTIES IMPORTED_LOCATION $&#123;PROJECT_SOURCE_DIR&#125;/libs/$&#123;ANDROID_ABI&#125;/libjpeg.so)</span><br><span class="line"></span><br><span class="line">add_library(compress SHARED src/main/cpp/compress.c)</span><br><span class="line"></span><br><span class="line">find_library(graphics jnigraphics)</span><br><span class="line">find_library(log-<span class="class"><span class="keyword">lib</span> <span class="title">log</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加链接上面个所 find 和 add 的 library</span></span><br><span class="line">target_link_libraries(compress jpeg $&#123;log-<span class="class"><span class="keyword">lib</span>&#125; $&#123;<span class="title">graphics</span>&#125;)</span></span><br></pre></td></tr></table></figure><h4 id="配置-gradle"><a class="markdownIt-Anchor" href="#配置-gradle"></a> 配置 Gradle</h4><p>简单的配置如下，至于 cppFlags 或 cFlags 的参数有点复杂，一般设置为空或不设置也是可以的，这里就不过多介绍了</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">compileSdkVersion <span class="number">25</span></span><br><span class="line">buildToolsVersion <span class="string">"25.0.3"</span></span><br><span class="line"></span><br><span class="line">defaultConfig &#123;</span><br><span class="line">    minSdkVersion <span class="number">15</span></span><br><span class="line">    targetSdkVersion <span class="number">25</span></span><br><span class="line">    versionCode <span class="number">1</span></span><br><span class="line">    versionName <span class="string">"1.0"</span></span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            <span class="comment">// Passes optional arguments to CMake.</span></span><br><span class="line">            <span class="built_in">arguments</span> </span><br><span class="line">            <span class="string">"-DANDROID_ARM_NEON=TRUE"</span>,</span><br><span class="line">            <span class="string">"-DANDROID_TOOLCHAIN=clang"</span></span><br><span class="line">            <span class="comment">// Sets optional flags for the C compiler.</span></span><br><span class="line">            cFlags <span class="string">"-D_EXAMPLE_C_FLAG1"</span>,<span class="string">"-D_EXAMPLE_C_FLAG2"</span></span><br><span class="line">            <span class="comment">// Sets a flag to enable format macro constants for the C++ compiler.</span></span><br><span class="line">            cppFlags <span class="string">"-D__STDC_FORMAT_MACROS"</span></span><br><span class="line">            <span class="comment">//生成.so库的目标平台</span></span><br><span class="line">            abiFilters <span class="string">'x86'</span>,<span class="string">'x86_64'</span>,<span class="string">'armeabi'</span>,<span class="string">'armeabi-v7a'</span>,<span class="string">'arm64-v8a'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//配置 CMakeLists.txt 路径</span></span><br><span class="line">externalNativeBuild &#123;</span><br><span class="line">     cmake &#123;</span><br><span class="line">        path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 多github（gitlab）账号管理</title>
      <link href="/git/git_multi_account_manager/"/>
      <url>/git/git_multi_account_manager/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><p>场景：很多时候我们有公司的github的账号同时自己私下还可能会有多个git平台的账号（如：github，gitlab）。这时候在管理git账号，指定哪个项目用哪个账号，放在哪个账户的仓库下，就显得尤为重要了。下面简单说下如何配置git config 文件去管理这些git平台账号。</p><h4 id="1-生成ssh-key"><a class="markdownIt-Anchor" href="#1-生成ssh-key"></a> 1. 生成ssh-key</h4><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail@company.com” -f ~/.ssh/id-rsa</span></span><br></pre></td></tr></table></figure><p><strong>explain</strong>：这样在~/.ssh/目录下就会生成id-rsa和id-rsa.pub的公钥和私钥。其中id-rsa 我们可以根据我们自己的需求来定义名称，例如我的名称personal-github-id-rsa(私人），company-github-id-rsa（公司github），company-gitlab-id-rsa（公司gitlab）。生成ssh-key 后我们可以copy 公钥到各git平台</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>pbcopy &lt; ~<span class="regexp">/.ssh/id</span>-rsa</span><br></pre></td></tr></table></figure><p>通过上面的命令将公钥copy到剪贴板，然后到git平台的ssh-key页面直接粘贴即可。</p><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/mybook/master/assets/remote_repository_ssh_url.png" alt></p><h4 id="2-添加私钥"><a class="markdownIt-Anchor" href="#2-添加私钥"></a> 2. 添加私钥</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">$ ssh-<span class="keyword">add</span><span class="bash"> ~/.ssh/id-rsa</span></span><br></pre></td></tr></table></figure><p>将私钥添加到我们本地ssh中</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以通过 ssh-add -l 来确私钥列表</span></span><br><span class="line">$ ssh-<span class="keyword">add</span><span class="bash"> -l</span></span><br><span class="line"><span class="comment"># 可以通过 ssh-add -D 来清空私钥列表</span></span><br><span class="line">$ ssh-<span class="keyword">add</span><span class="bash"> -D</span></span><br></pre></td></tr></table></figure><h4 id="3-创建多账号管理文件"><a class="markdownIt-Anchor" href="#3-创建多账号管理文件"></a> 3. 创建多账号管理文件</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">touch ~/.ssh/config</span><br><span class="line">vim config</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gitlab    </span></span><br><span class="line"><span class="attr">Host</span> <span class="string">gitlab.com</span></span><br><span class="line">     <span class="attr">HostName</span> <span class="string">gitlab.com</span></span><br><span class="line">     <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line">     <span class="attr">IdentityFile</span> <span class="string">~/.ssh/company-gitlab-id-rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># github</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">github-company</span></span><br><span class="line">     <span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line">     <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line">     <span class="attr">IdentityFile</span> <span class="string">~/.ssh/company-github-id-rsa</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#personal-github</span></span><br><span class="line"><span class="attr">Host</span> <span class="string">github-personal</span></span><br><span class="line">     <span class="attr">HostName</span> <span class="string">github.com</span></span><br><span class="line">     <span class="attr">PreferredAuthentications</span> <span class="string">publickey</span></span><br><span class="line">     <span class="attr">IdentityFile</span> <span class="string">~/.ssh/personal-github-rsa</span></span><br></pre></td></tr></table></figure><p><strong>explain</strong>: Host 这里可以理解为我们为实际的host（如：<a href="http://github.com" target="_blank" rel="noopener">github.com</a>）起的别名，HostName才是实际的host address值，这样我们在本地仓库指定远程仓库的时候就可以区分出同一个平台下的不同账号体系了，可以通过下面的remote repository 地址可以看出。</p><h4 id="4-为本地仓库指定远程仓库地址"><a class="markdownIt-Anchor" href="#4-为本地仓库指定远程仓库地址"></a> 4. 为本地仓库指定远程仓库地址</h4><h5 id="41-远程仓库地址从github中直接复制显示"><a class="markdownIt-Anchor" href="#41-远程仓库地址从github中直接复制显示"></a> 4.1 远程仓库地址，从github中直接复制显示：</h5><p><img src="https://raw.githubusercontent.com/Davidxiaoshuo/mybook/master/assets/remote_repository_ssh_url.png" alt></p><h5 id="42-实际为本地仓库指定远程仓库地址需要这样"><a class="markdownIt-Anchor" href="#42-实际为本地仓库指定远程仓库地址需要这样"></a> 4.2 实际为本地仓库指定远程仓库地址需要这样：</h5><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">添加地址：<span class="string">git </span><span class="string">remote </span><span class="string">add </span><span class="string">origin </span><span class="string">git@</span><span class="string">github-personal:Davidxiaoshuo/</span><span class="string">EmotionCalendar.</span><span class="string">git</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">重</span>定向地址：<span class="string">git </span><span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">git@</span><span class="string">github-personal:Davidxiaoshuo/</span><span class="string">EmotionCalendar.</span><span class="string">git</span></span><br></pre></td></tr></table></figure><p><strong>explain</strong>: 其中git@后面的字段为我们在config配置文件中的Host的值</p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/others/hello_world/"/>
      <url>/others/hello_world/</url>
      
        <content type="html"><![CDATA[<!-- build time:Sat Nov 30 2019 17:41:00 GMT+0800 (China Standard Time) --><h1 id="hexo-page-简单发布流程"><a class="markdownIt-Anchor" href="#hexo-page-简单发布流程"></a> Hexo Page 简单发布流程</h1><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
      
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
